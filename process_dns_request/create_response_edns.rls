           /*********************************************************/
                           /*Proof Rule Declarations*/
                             /*Examiner GPL Edition*/

           /*********************************************************/


             /*procedure Process_Dns_Request.Create_Response_EDNS*/


rule_family create_respo_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

create_respo_rules(1): dns_types__packet_size may_be_replaced_by 8192.
create_respo_rules(2): dns_types__header_bits may_be_replaced_by 96.
create_respo_rules(3): dns_types__udp_max_size may_be_replaced_by 512.
create_respo_rules(4): dns_types__dnssecmask may_be_replaced_by 128.
create_respo_rules(5): system__min_int may_be_replaced_by -9223372036854775808.
create_respo_rules(6): system__max_int may_be_replaced_by 9223372036854775807.
create_respo_rules(7): dns_types__unsigned_short__min(X, Y) may_be_replaced_by Y if [X >= Y].
create_respo_rules(8): dns_types__unsigned_short__min(X, Y) may_be_replaced_by X if [Y >= X].
create_respo_rules(9): dns_types__unsigned_short__min(X, Y) >= 
     dns_types__unsigned_short__base__first may_be_deduced.
create_respo_rules(10): dns_types__unsigned_short__min(X, Y) <= 
     dns_types__unsigned_short__base__last may_be_deduced.
create_respo_rules(11): dns_types__packet_length_range__max(X, Y) may_be_replaced_by X if [X >= Y].
create_respo_rules(12): dns_types__packet_length_range__max(X, Y) may_be_replaced_by Y if [Y >= X].
create_respo_rules(13): dns_types__packet_length_range__max(X, Y) >= 
     dns_types__packet_length_range__base__first may_be_deduced.
create_respo_rules(14): dns_types__packet_length_range__max(X, Y) <= 
     dns_types__packet_length_range__base__last may_be_deduced.
create_respo_rules(15): integer__size >= 0 may_be_deduced.
create_respo_rules(16): integer__first may_be_replaced_by -2147483648.
create_respo_rules(17): integer__last may_be_replaced_by 2147483647.
create_respo_rules(18): integer__base__first may_be_replaced_by -2147483648.
create_respo_rules(19): integer__base__last may_be_replaced_by 2147483647.
create_respo_rules(20): character__size >= 0 may_be_deduced.
create_respo_rules(21): character__first may_be_replaced_by 0.
create_respo_rules(22): character__last may_be_replaced_by 255.
create_respo_rules(23): character__base__first may_be_replaced_by 0.
create_respo_rules(24): character__base__last may_be_replaced_by 255.
create_respo_rules(25): dns_types__packet_length_range__size >= 0 may_be_deduced.
create_respo_rules(26): dns_types__packet_length_range__first may_be_replaced_by 0.
create_respo_rules(27): dns_types__packet_length_range__last may_be_replaced_by 8192.
create_respo_rules(28): dns_types__packet_length_range__base__first may_be_replaced_by -2147483648.
create_respo_rules(29): dns_types__packet_length_range__base__last may_be_replaced_by 2147483647.
create_respo_rules(30): dns_types__packet_bytes_range__size >= 0 may_be_deduced.
create_respo_rules(31): dns_types__packet_bytes_range__first may_be_replaced_by 1.
create_respo_rules(32): dns_types__packet_bytes_range__last may_be_replaced_by 8180.
create_respo_rules(33): dns_types__packet_bytes_range__base__first may_be_replaced_by -2147483648.
create_respo_rules(34): dns_types__packet_bytes_range__base__last may_be_replaced_by 2147483647.
create_respo_rules(35): dns_types__byte__size >= 0 may_be_deduced.
create_respo_rules(36): dns_types__byte__size may_be_replaced_by 8.
create_respo_rules(37): dns_types__byte__first may_be_replaced_by 0.
create_respo_rules(38): dns_types__byte__last may_be_replaced_by 255.
create_respo_rules(39): dns_types__byte__base__first may_be_replaced_by 0.
create_respo_rules(40): dns_types__byte__base__last may_be_replaced_by 255.
create_respo_rules(41): dns_types__byte__modulus may_be_replaced_by 256.
create_respo_rules(42): dns_types__unsigned_short__size >= 0 may_be_deduced.
create_respo_rules(43): dns_types__unsigned_short__size may_be_replaced_by 16.
create_respo_rules(44): dns_types__unsigned_short__first may_be_replaced_by 0.
create_respo_rules(45): dns_types__unsigned_short__last may_be_replaced_by 65535.
create_respo_rules(46): dns_types__unsigned_short__base__first may_be_replaced_by -2147483648.
create_respo_rules(47): dns_types__unsigned_short__base__last may_be_replaced_by 2147483647.
create_respo_rules(48): dns_types__opcode_type__size >= 0 may_be_deduced.
create_respo_rules(49): dns_types__opcode_type__size may_be_replaced_by 4.
create_respo_rules(50): dns_types__opcode_type__first may_be_replaced_by dns_types__query.
create_respo_rules(51): dns_types__opcode_type__last may_be_replaced_by dns_types__status.
create_respo_rules(52): dns_types__opcode_type__base__first may_be_replaced_by dns_types__query.
create_respo_rules(53): dns_types__opcode_type__base__last may_be_replaced_by dns_types__status.
create_respo_rules(54): dns_types__opcode_type__pos(
     dns_types__opcode_type__first) may_be_replaced_by 0.
create_respo_rules(55): dns_types__opcode_type__pos(
     dns_types__query) may_be_replaced_by 0.
create_respo_rules(56): dns_types__opcode_type__val(0) may_be_replaced_by 
     dns_types__query.
create_respo_rules(57): dns_types__opcode_type__pos(
     dns_types__iquery) may_be_replaced_by 1.
create_respo_rules(58): dns_types__opcode_type__val(1) may_be_replaced_by 
     dns_types__iquery.
create_respo_rules(59): dns_types__opcode_type__pos(
     dns_types__status) may_be_replaced_by 2.
create_respo_rules(60): dns_types__opcode_type__val(2) may_be_replaced_by 
     dns_types__status.
create_respo_rules(61): dns_types__opcode_type__pos(
     dns_types__opcode_type__last) may_be_replaced_by 2.
create_respo_rules(62): dns_types__opcode_type__pos(succ(X)) may_be_replaced_by 
     dns_types__opcode_type__pos(X) + 1
     if [X <=dns_types__status, X <> dns_types__status].
create_respo_rules(63): dns_types__opcode_type__pos(pred(X)) may_be_replaced_by 
     dns_types__opcode_type__pos(X) - 1
     if [X >=dns_types__query, X <> dns_types__query].
create_respo_rules(64): dns_types__opcode_type__pos(X) >= 0 may_be_deduced_from
     [dns_types__query <= X, X <= dns_types__status].
create_respo_rules(65): dns_types__opcode_type__pos(X) <= 2 may_be_deduced_from
     [dns_types__query <= X, X <= dns_types__status].
create_respo_rules(66): dns_types__opcode_type__val(X) >= 
     dns_types__query may_be_deduced_from
     [0 <= X, X <= 2].
create_respo_rules(67): dns_types__opcode_type__val(X) <= 
     dns_types__status may_be_deduced_from
     [0 <= X, X <= 2].
create_respo_rules(68): succ(dns_types__opcode_type__val(X)) may_be_replaced_by 
     dns_types__opcode_type__val(X+1)
     if [0 <= X, X < 2].
create_respo_rules(69): pred(dns_types__opcode_type__val(X)) may_be_replaced_by 
     dns_types__opcode_type__val(X-1)
     if [0 < X, X <= 2].
create_respo_rules(70): dns_types__opcode_type__pos(
     dns_types__opcode_type__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 2].
create_respo_rules(71): dns_types__opcode_type__val(
     dns_types__opcode_type__pos(X)) may_be_replaced_by X
     if [dns_types__query <= X, X <= dns_types__status].
create_respo_rules(72): dns_types__opcode_type__pos(X) <= 
     dns_types__opcode_type__pos(Y) & X <= Y are_interchangeable 
     if [dns_types__query <= X, X <= dns_types__status, 
     dns_types__query <= Y, Y <= dns_types__status].
create_respo_rules(73): dns_types__opcode_type__val(X) <= 
     dns_types__opcode_type__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 2, 0 <= Y, Y <= 2].
create_respo_rules(74): dns_types__response_code__size >= 0 may_be_deduced.
create_respo_rules(75): dns_types__response_code__size may_be_replaced_by 4.
create_respo_rules(76): dns_types__response_code__first may_be_replaced_by dns_types__no_error.
create_respo_rules(77): dns_types__response_code__last may_be_replaced_by dns_types__refused.
create_respo_rules(78): dns_types__response_code__base__first may_be_replaced_by dns_types__no_error.
create_respo_rules(79): dns_types__response_code__base__last may_be_replaced_by dns_types__refused.
create_respo_rules(80): dns_types__response_code__pos(
     dns_types__response_code__first) may_be_replaced_by 0.
create_respo_rules(81): dns_types__response_code__pos(
     dns_types__no_error) may_be_replaced_by 0.
create_respo_rules(82): dns_types__response_code__val(0) may_be_replaced_by 
     dns_types__no_error.
create_respo_rules(83): dns_types__response_code__pos(
     dns_types__format_error) may_be_replaced_by 1.
create_respo_rules(84): dns_types__response_code__val(1) may_be_replaced_by 
     dns_types__format_error.
create_respo_rules(85): dns_types__response_code__pos(
     dns_types__server_failure) may_be_replaced_by 2.
create_respo_rules(86): dns_types__response_code__val(2) may_be_replaced_by 
     dns_types__server_failure.
create_respo_rules(87): dns_types__response_code__pos(
     dns_types__name_error) may_be_replaced_by 3.
create_respo_rules(88): dns_types__response_code__val(3) may_be_replaced_by 
     dns_types__name_error.
create_respo_rules(89): dns_types__response_code__pos(
     dns_types__not_implemented) may_be_replaced_by 4.
create_respo_rules(90): dns_types__response_code__val(4) may_be_replaced_by 
     dns_types__not_implemented.
create_respo_rules(91): dns_types__response_code__pos(
     dns_types__refused) may_be_replaced_by 5.
create_respo_rules(92): dns_types__response_code__val(5) may_be_replaced_by 
     dns_types__refused.
create_respo_rules(93): dns_types__response_code__pos(
     dns_types__response_code__last) may_be_replaced_by 5.
create_respo_rules(94): dns_types__response_code__pos(succ(X)) may_be_replaced_by 
     dns_types__response_code__pos(X) + 1
     if [X <=dns_types__refused, X <> dns_types__refused].
create_respo_rules(95): dns_types__response_code__pos(pred(X)) may_be_replaced_by 
     dns_types__response_code__pos(X) - 1
     if [X >=dns_types__no_error, X <> dns_types__no_error].
create_respo_rules(96): dns_types__response_code__pos(X) >= 0 may_be_deduced_from
     [dns_types__no_error <= X, X <= dns_types__refused].
create_respo_rules(97): dns_types__response_code__pos(X) <= 5 may_be_deduced_from
     [dns_types__no_error <= X, X <= dns_types__refused].
create_respo_rules(98): dns_types__response_code__val(X) >= 
     dns_types__no_error may_be_deduced_from
     [0 <= X, X <= 5].
create_respo_rules(99): dns_types__response_code__val(X) <= 
     dns_types__refused may_be_deduced_from
     [0 <= X, X <= 5].
create_respo_rules(100): succ(dns_types__response_code__val(X)) may_be_replaced_by 
     dns_types__response_code__val(X+1)
     if [0 <= X, X < 5].
create_respo_rules(101): pred(dns_types__response_code__val(X)) may_be_replaced_by 
     dns_types__response_code__val(X-1)
     if [0 < X, X <= 5].
create_respo_rules(102): dns_types__response_code__pos(
     dns_types__response_code__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 5].
create_respo_rules(103): dns_types__response_code__val(
     dns_types__response_code__pos(X)) may_be_replaced_by X
     if [dns_types__no_error <= X, X <= dns_types__refused].
create_respo_rules(104): dns_types__response_code__pos(X) <= 
     dns_types__response_code__pos(Y) & X <= Y are_interchangeable 
     if [dns_types__no_error <= X, X <= dns_types__refused, 
     dns_types__no_error <= Y, Y <= dns_types__refused].
create_respo_rules(105): dns_types__response_code__val(X) <= 
     dns_types__response_code__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 5, 0 <= Y, Y <= 5].
create_respo_rules(106): dns_types__header_type__size >= 0 may_be_deduced.
create_respo_rules(107): dns_types__header_type__size may_be_replaced_by 96.
create_respo_rules(108): A = B may_be_deduced_from
     [goal(checktype(A,dns_types__header_type)),
      goal(checktype(B,dns_types__header_type)),
      fld_messageid(A) = fld_messageid(B),
      fld_qr(A) = fld_qr(B),
      fld_opcode(A) = fld_opcode(B),
      fld_aa(A) = fld_aa(B),
      fld_tc(A) = fld_tc(B),
      fld_rd(A) = fld_rd(B),
      fld_ra(A) = fld_ra(B),
      fld_res1(A) = fld_res1(B),
      fld_res2(A) = fld_res2(B),
      fld_res3(A) = fld_res3(B),
      fld_rcode(A) = fld_rcode(B),
      fld_qdcount(A) = fld_qdcount(B),
      fld_ancount(A) = fld_ancount(B),
      fld_nscount(A) = fld_nscount(B),
      fld_arcount(A) = fld_arcount(B)].
create_respo_rules(109): dns_types__query_type__size >= 0 may_be_deduced.
create_respo_rules(110): dns_types__query_type__size may_be_replaced_by 16.
create_respo_rules(111): dns_types__query_type__first may_be_replaced_by dns_types__a.
create_respo_rules(112): dns_types__query_type__last may_be_replaced_by dns_types__unimplemented.
create_respo_rules(113): dns_types__query_type__base__first may_be_replaced_by dns_types__a.
create_respo_rules(114): dns_types__query_type__base__last may_be_replaced_by dns_types__unimplemented.
create_respo_rules(115): dns_types__query_type__pos(
     dns_types__query_type__first) may_be_replaced_by 0.
create_respo_rules(116): dns_types__query_type__pos(dns_types__a) may_be_replaced_by 0.
create_respo_rules(117): dns_types__query_type__val(0) may_be_replaced_by 
     dns_types__a.
create_respo_rules(118): dns_types__query_type__pos(dns_types__ns) may_be_replaced_by 1.
create_respo_rules(119): dns_types__query_type__val(1) may_be_replaced_by 
     dns_types__ns.
create_respo_rules(120): dns_types__query_type__pos(
     dns_types__cname) may_be_replaced_by 2.
create_respo_rules(121): dns_types__query_type__val(2) may_be_replaced_by 
     dns_types__cname.
create_respo_rules(122): dns_types__query_type__pos(
     dns_types__soa) may_be_replaced_by 3.
create_respo_rules(123): dns_types__query_type__val(3) may_be_replaced_by 
     dns_types__soa.
create_respo_rules(124): dns_types__query_type__pos(
     dns_types__wks) may_be_replaced_by 4.
create_respo_rules(125): dns_types__query_type__val(4) may_be_replaced_by 
     dns_types__wks.
create_respo_rules(126): dns_types__query_type__pos(
     dns_types__ptr) may_be_replaced_by 5.
create_respo_rules(127): dns_types__query_type__val(5) may_be_replaced_by 
     dns_types__ptr.
create_respo_rules(128): dns_types__query_type__pos(dns_types__mx) may_be_replaced_by 6.
create_respo_rules(129): dns_types__query_type__val(6) may_be_replaced_by 
     dns_types__mx.
create_respo_rules(130): dns_types__query_type__pos(
     dns_types__aaaa) may_be_replaced_by 7.
create_respo_rules(131): dns_types__query_type__val(7) may_be_replaced_by 
     dns_types__aaaa.
create_respo_rules(132): dns_types__query_type__pos(
     dns_types__srv) may_be_replaced_by 8.
create_respo_rules(133): dns_types__query_type__val(8) may_be_replaced_by 
     dns_types__srv.
create_respo_rules(134): dns_types__query_type__pos(dns_types__a6) may_be_replaced_by 9.
create_respo_rules(135): dns_types__query_type__val(9) may_be_replaced_by 
     dns_types__a6.
create_respo_rules(136): dns_types__query_type__pos(
     dns_types__opt) may_be_replaced_by 10.
create_respo_rules(137): dns_types__query_type__val(10) may_be_replaced_by 
     dns_types__opt.
create_respo_rules(138): dns_types__query_type__pos(dns_types__ds) may_be_replaced_by 11.
create_respo_rules(139): dns_types__query_type__val(11) may_be_replaced_by 
     dns_types__ds.
create_respo_rules(140): dns_types__query_type__pos(
     dns_types__rrsig) may_be_replaced_by 12.
create_respo_rules(141): dns_types__query_type__val(12) may_be_replaced_by 
     dns_types__rrsig.
create_respo_rules(142): dns_types__query_type__pos(
     dns_types__nsec) may_be_replaced_by 13.
create_respo_rules(143): dns_types__query_type__val(13) may_be_replaced_by 
     dns_types__nsec.
create_respo_rules(144): dns_types__query_type__pos(
     dns_types__dnskey) may_be_replaced_by 14.
create_respo_rules(145): dns_types__query_type__val(14) may_be_replaced_by 
     dns_types__dnskey.
create_respo_rules(146): dns_types__query_type__pos(
     dns_types__any) may_be_replaced_by 15.
create_respo_rules(147): dns_types__query_type__val(15) may_be_replaced_by 
     dns_types__any.
create_respo_rules(148): dns_types__query_type__pos(
     dns_types__caa) may_be_replaced_by 16.
create_respo_rules(149): dns_types__query_type__val(16) may_be_replaced_by 
     dns_types__caa.
create_respo_rules(150): dns_types__query_type__pos(
     dns_types__error) may_be_replaced_by 17.
create_respo_rules(151): dns_types__query_type__val(17) may_be_replaced_by 
     dns_types__error.
create_respo_rules(152): dns_types__query_type__pos(
     dns_types__unimplemented) may_be_replaced_by 18.
create_respo_rules(153): dns_types__query_type__val(18) may_be_replaced_by 
     dns_types__unimplemented.
create_respo_rules(154): dns_types__query_type__pos(
     dns_types__query_type__last) may_be_replaced_by 18.
create_respo_rules(155): dns_types__query_type__pos(succ(X)) may_be_replaced_by 
     dns_types__query_type__pos(X) + 1
     if [X <=dns_types__unimplemented, X <> 
     dns_types__unimplemented].
create_respo_rules(156): dns_types__query_type__pos(pred(X)) may_be_replaced_by 
     dns_types__query_type__pos(X) - 1
     if [X >=dns_types__a, X <> dns_types__a].
create_respo_rules(157): dns_types__query_type__pos(X) >= 0 may_be_deduced_from
     [dns_types__a <= X, X <= dns_types__unimplemented].
create_respo_rules(158): dns_types__query_type__pos(X) <= 18 may_be_deduced_from
     [dns_types__a <= X, X <= dns_types__unimplemented].
create_respo_rules(159): dns_types__query_type__val(X) >= 
     dns_types__a may_be_deduced_from
     [0 <= X, X <= 18].
create_respo_rules(160): dns_types__query_type__val(X) <= 
     dns_types__unimplemented may_be_deduced_from
     [0 <= X, X <= 18].
create_respo_rules(161): succ(dns_types__query_type__val(X)) may_be_replaced_by 
     dns_types__query_type__val(X+1)
     if [0 <= X, X < 18].
create_respo_rules(162): pred(dns_types__query_type__val(X)) may_be_replaced_by 
     dns_types__query_type__val(X-1)
     if [0 < X, X <= 18].
create_respo_rules(163): dns_types__query_type__pos(
     dns_types__query_type__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 18].
create_respo_rules(164): dns_types__query_type__val(
     dns_types__query_type__pos(X)) may_be_replaced_by X
     if [dns_types__a <= X, X <= dns_types__unimplemented].
create_respo_rules(165): dns_types__query_type__pos(X) <= 
     dns_types__query_type__pos(Y) & X <= Y are_interchangeable 
     if [dns_types__a <= X, X <= dns_types__unimplemented, 
     dns_types__a <= Y, Y <= dns_types__unimplemented].
create_respo_rules(166): dns_types__query_type__val(X) <= 
     dns_types__query_type__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 18, 0 <= Y, Y <= 18].
create_respo_rules(167): dns_types__edns_record__size >= 0 may_be_deduced.
create_respo_rules(168): A = B may_be_deduced_from
     [goal(checktype(A,dns_types__edns_record)),
      goal(checktype(B,dns_types__edns_record)),
      fld_root(A) = fld_root(B),
      fld_code(A) = fld_code(B),
      fld_payload_size(A) = fld_payload_size(B),
      fld_rcode(A) = fld_rcode(B),
      fld_version(A) = fld_version(B),
      fld_ztop(A) = fld_ztop(B),
      fld_zbottom(A) = fld_zbottom(B),
      fld_rdlen(A) = fld_rdlen(B)].
create_respo_rules(169): dns_types__dns_packet__size >= 0 may_be_deduced.
create_respo_rules(170): A = B may_be_deduced_from
     [goal(checktype(A,dns_types__dns_packet)),
      goal(checktype(B,dns_types__dns_packet)),
      fld_header(A) = fld_header(B),
      fld_bytes(A) = fld_bytes(B)].
