           *******************************************************
                       Semantic Analysis of SPARK Text
                             Examiner GPL Edition

           *******************************************************


             procedure Process_Dns_Request.Create_Response_PTR




For path(s) from start to run-time check associated with statement of line 435:

procedure_create_response_ptr_1.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
        ->
C1:    start_byte >= dns_types__packet_bytes_range__first .
C2:    start_byte <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 437:

procedure_create_response_ptr_2.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    num_found__1 >= rr_type__numberofrecordstype__first .
C2:    num_found__1 <= rr_type__numberofrecordstype__last .
 

For path(s) from start to run-time check associated with statement of line 443:

procedure_create_response_ptr_3.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
        ->
C1:    1 >= natural__first .
C2:    1 <= natural__last .
 

For path(s) from start to run-time check associated with statement of line 444:

procedure_create_response_ptr_4.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
        ->
C1:    1 >= rr_type__returnedrecordsindextype__first .
C2:    1 <= rr_type__returnedrecordsindextype__last .
 

For path(s) from start to run-time check associated with statement of line 444:

procedure_create_response_ptr_5.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
        ->
C1:    rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
C2:    rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 445:

procedure_create_response_ptr_6.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
H57:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H58:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H59:   num_found__1 >= rr_type__numberofrecordstype__first .
H60:   num_found__1 <= rr_type__numberofrecordstype__last .
H61:   1 >= natural__first .
H62:   1 <= natural__last .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H66:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
        ->
C1:    (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) <= integer__base__last)) .
C2:    (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (1 <= num_found__1) -> ((12 + dns_types__header_bits div 8 >= system__min_int)
           and (12 + dns_types__header_bits div 8 <= system__max_int)) .
C4:    (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
C5:    (1 <= num_found__1) -> (8 <> 0) .
C6:    (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 445:

procedure_create_response_ptr_7.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H133:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H134:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H135:  num_found >= rr_type__numberofrecordstype__first .
H136:  num_found <= rr_type__numberofrecordstype__last .
H137:  response_counter + 1 >= natural__first .
H138:  response_counter + 1 <= natural__last .
H139:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H140:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H141:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H142:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
        ->
C1:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
C2:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
C4:    (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
C5:    (response_counter + 1 <= num_found) -> (8 <> 0) .
C6:    (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
 

procedure_create_response_ptr_8.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  not (response_counter + 1 <= num_found) .
H123:  num_found >= rr_type__numberofrecordstype__first .
H124:  num_found <= rr_type__numberofrecordstype__last .
H125:  response_counter + 1 >= natural__first .
H126:  response_counter + 1 <= natural__last .
H127:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H128:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H129:  current_name_length >= rr_type__wirestringtypeindex__first .
H130:  current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
C2:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
C4:    (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
C5:    (response_counter + 1 <= num_found) -> (8 <> 0) .
C6:    (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
 

For path(s) from start to assertion of line 448:

procedure_create_response_ptr_9.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
H57:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H58:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H59:   num_found__1 >= rr_type__numberofrecordstype__first .
H60:   num_found__1 <= rr_type__numberofrecordstype__last .
H61:   1 >= natural__first .
H62:   1 <= natural__last .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H66:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H67:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) <= integer__base__last)) .
H68:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H69:   (1 <= num_found__1) -> ((12 + dns_types__header_bits div 8 >= system__min_int)
           and (12 + dns_types__header_bits div 8 <= system__max_int)) .
H70:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H71:   (1 <= num_found__1) -> (8 <> 0) .
H72:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H73:   1 <= num_found__1 .
H74:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) .
        ->
C1:    1 >= 1 .
C2:    1 <= num_found__1 .
C3:    rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           1 .
C4:    rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
C5:    num_found__1 <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) .
C10:   start_byte >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 448 to assertion of line 448:

procedure_create_response_ptr_10.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H133:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H134:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H135:  num_found >= rr_type__numberofrecordstype__first .
H136:  num_found <= rr_type__numberofrecordstype__last .
H137:  response_counter + 1 >= natural__first .
H138:  response_counter + 1 <= natural__last .
H139:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H140:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H141:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H142:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H143:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H144:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H145:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H146:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H147:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H148:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H149:  response_counter + 1 <= num_found .
H150:  current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) .
        ->
C1:    response_counter + 1 >= 1 .
C2:    response_counter + 1 <= num_found .
C3:    rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 1 .
C4:    rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
C5:    num_found <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count~ .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) .
C10:   current_byte + 12 + current_name_length >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

procedure_create_response_ptr_11.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  not (response_counter + 1 <= num_found) .
H123:  num_found >= rr_type__numberofrecordstype__first .
H124:  num_found <= rr_type__numberofrecordstype__last .
H125:  response_counter + 1 >= natural__first .
H126:  response_counter + 1 <= natural__last .
H127:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H128:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H129:  current_name_length >= rr_type__wirestringtypeindex__first .
H130:  current_name_length <= rr_type__wirestringtypeindex__last .
H131:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H132:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H133:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H134:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H135:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H136:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H137:  response_counter + 1 <= num_found .
H138:  current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
        ->
C1:    response_counter + 1 >= 1 .
C2:    response_counter + 1 <= num_found .
C3:    current_name_length >= 1 .
C4:    current_name_length <= rr_type__wirestringtypeindex__last .
C5:    num_found <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count~ .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
C10:   current_byte + 12 + current_name_length >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 448 to precondition check associated with statement of line 458:

procedure_create_response_ptr_12.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
C2:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
C3:    current_byte + 1 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 1 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
C6:    qname_location >= unsigned_types__unsigned16__first .
C7:    qname_location <= unsigned_types__unsigned16__last .
C8:    current_byte + 1 >= dns_types__packet_bytes_range__base__first .
C9:    current_byte + 1 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 460:

procedure_create_response_ptr_13.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 3 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 3 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 3 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 3 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 461:

procedure_create_response_ptr_14.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    12 >= dns_types__byte__first .
C2:    12 <= dns_types__byte__last .
C3:    current_byte + 4 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 4 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 4 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 4 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 463:

procedure_create_response_ptr_15.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 5 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 5 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 5 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 5 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 464:

procedure_create_response_ptr_16.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    1 >= dns_types__byte__first .
C2:    1 <= dns_types__byte__last .
C3:    current_byte + 6 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 6 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 6 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 6 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to precondition check associated with statement of line 465:

procedure_create_response_ptr_17.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    current_name_length >= rr_type__wirestringtypeindex__first .
C2:    current_name_length <= rr_type__wirestringtypeindex__last .
C3:    current_byte + 7 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 7 <= dns_types__packet_bytes_range__last .
C5:    current_name_length >= 0 .
C6:    current_name_length <= rr_type__wirestringtypeindex__last .
C7:    current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
C8:    response_counter >= rr_type__returnedrecordsindextype__first .
C9:    response_counter <= rr_type__returnedrecordsindextype__last .
C10:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
C11:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 467:

procedure_create_response_ptr_18.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
        ->
C1:    response_counter + 1 >= natural__first .
C2:    response_counter + 1 <= natural__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 468:

procedure_create_response_ptr_19.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
C2:    current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
C3:    current_name_length >= dns_types__packet_bytes_range__first .
C4:    current_name_length <= dns_types__packet_bytes_range__last .
C5:    current_byte + 12 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 12 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 470:

procedure_create_response_ptr_20.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
        ->
C1:    response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
C2:    response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 470:

procedure_create_response_ptr_21.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
        ->
C1:    rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
C2:    rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 474:

procedure_create_response_ptr_22.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
H57:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H58:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H59:   num_found__1 >= rr_type__numberofrecordstype__first .
H60:   num_found__1 <= rr_type__numberofrecordstype__last .
H61:   1 >= natural__first .
H62:   1 <= natural__last .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H66:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H67:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) <= integer__base__last)) .
H68:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H69:   (1 <= num_found__1) -> ((12 + dns_types__header_bits div 8 >= system__min_int)
           and (12 + dns_types__header_bits div 8 <= system__max_int)) .
H70:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H71:   (1 <= num_found__1) -> (8 <> 0) .
H72:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H73:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))))) .
H74:   start_byte >= dns_types__packet_bytes_range__first .
H75:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_create_response_ptr_23.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   not (num_found__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 474:

procedure_create_response_ptr_24.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H133:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H134:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H135:  num_found >= rr_type__numberofrecordstype__first .
H136:  num_found <= rr_type__numberofrecordstype__last .
H137:  response_counter + 1 >= natural__first .
H138:  response_counter + 1 <= natural__last .
H139:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H140:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H141:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H142:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H143:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H144:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H145:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H146:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H147:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H148:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H149:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))))) .
H150:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H151:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_create_response_ptr_25.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  not (response_counter + 1 <= num_found) .
H123:  num_found >= rr_type__numberofrecordstype__first .
H124:  num_found <= rr_type__numberofrecordstype__last .
H125:  response_counter + 1 >= natural__first .
H126:  response_counter + 1 <= natural__last .
H127:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H128:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H129:  current_name_length >= rr_type__wirestringtypeindex__first .
H130:  current_name_length <= rr_type__wirestringtypeindex__last .
H131:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H132:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H133:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H134:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H135:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H136:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H137:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H138:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H139:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from start to run-time check associated with statement of line 475:

procedure_create_response_ptr_26.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
H57:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H58:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H59:   num_found__1 >= rr_type__numberofrecordstype__first .
H60:   num_found__1 <= rr_type__numberofrecordstype__last .
H61:   1 >= natural__first .
H62:   1 <= natural__last .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H66:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H67:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) <= integer__base__last)) .
H68:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H69:   (1 <= num_found__1) -> ((12 + dns_types__header_bits div 8 >= system__min_int)
           and (12 + dns_types__header_bits div 8 <= system__max_int)) .
H70:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H71:   (1 <= num_found__1) -> (8 <> 0) .
H72:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H73:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))))) .
H74:   start_byte >= dns_types__packet_bytes_range__first .
H75:   start_byte <= dns_types__packet_bytes_range__last .
H76:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H77:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H78:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H79:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H80:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H81:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H82:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H83:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H84:   dns_types__header_bits div 8 >= system__min_int .
H85:   dns_types__header_bits div 8 <= system__max_int .
H86:   8 <> 0 .
H87:   num_found__1 >= rr_type__numberofrecordstype__first .
H88:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
C3:    num_found__1 >= dns_types__unsigned_short__first .
C4:    num_found__1 <= dns_types__unsigned_short__last .
 

procedure_create_response_ptr_27.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   not (num_found__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
H47:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H48:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H49:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H50:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H51:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H52:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H53:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H54:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H55:   dns_types__header_bits div 8 >= system__min_int .
H56:   dns_types__header_bits div 8 <= system__max_int .
H57:   8 <> 0 .
H58:   num_found__1 >= rr_type__numberofrecordstype__first .
H59:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
C3:    num_found__1 >= dns_types__unsigned_short__first .
C4:    num_found__1 <= dns_types__unsigned_short__last .
 

For path(s) from assertion of line 448 to run-time check associated with statement of line 475:

procedure_create_response_ptr_28.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H133:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H134:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H135:  num_found >= rr_type__numberofrecordstype__first .
H136:  num_found <= rr_type__numberofrecordstype__last .
H137:  response_counter + 1 >= natural__first .
H138:  response_counter + 1 <= natural__last .
H139:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H140:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H141:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H142:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H143:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H144:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H145:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H146:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H147:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H148:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H149:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))))) .
H150:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H151:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H152:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H153:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H154:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H155:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H156:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H157:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H158:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H159:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H160:  dns_types__header_bits div 8 >= system__min_int .
H161:  dns_types__header_bits div 8 <= system__max_int .
H162:  8 <> 0 .
H163:  num_found >= rr_type__numberofrecordstype__first .
H164:  num_found <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found >= dns_types__unsigned_short__first .
C2:    answer_count + num_found <= dns_types__unsigned_short__last .
C3:    num_found >= dns_types__unsigned_short__first .
C4:    num_found <= dns_types__unsigned_short__last .
 

procedure_create_response_ptr_29.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  not (response_counter + 1 <= num_found) .
H123:  num_found >= rr_type__numberofrecordstype__first .
H124:  num_found <= rr_type__numberofrecordstype__last .
H125:  response_counter + 1 >= natural__first .
H126:  response_counter + 1 <= natural__last .
H127:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H128:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H129:  current_name_length >= rr_type__wirestringtypeindex__first .
H130:  current_name_length <= rr_type__wirestringtypeindex__last .
H131:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H132:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H133:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H134:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H135:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H136:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H137:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H138:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H139:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H140:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H141:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H142:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H143:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H144:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H145:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H146:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H147:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H148:  dns_types__header_bits div 8 >= system__min_int .
H149:  dns_types__header_bits div 8 <= system__max_int .
H150:  8 <> 0 .
H151:  num_found >= rr_type__numberofrecordstype__first .
H152:  num_found <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found >= dns_types__unsigned_short__first .
C2:    answer_count + num_found <= dns_types__unsigned_short__last .
C3:    num_found >= dns_types__unsigned_short__first .
C4:    num_found <= dns_types__unsigned_short__last .
 

For path(s) from start to finish:

procedure_create_response_ptr_30.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   num_found__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   1 >= natural__first .
H48:   1 <= natural__last .
H49:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H50:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H52:   1 >= rr_type__returnedrecordsindextype__first .
H53:   1 <= rr_type__returnedrecordsindextype__last .
H54:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H55:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H56:   (rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_domainname(element(
           replies__1, [1]))) - 1)) -> (element(fld_domainname(element(
           replies__1, [1])), [q_]) <> 0)))) .
H57:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H58:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H59:   num_found__1 >= rr_type__numberofrecordstype__first .
H60:   num_found__1 <= rr_type__numberofrecordstype__last .
H61:   1 >= natural__first .
H62:   1 <= natural__last .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) >= 
           rr_type__wirestringtypeindex__first .
H66:   rr_type__wirenamelength(fld_domainname(element(replies__1, [1]))) <= 
           rr_type__wirestringtypeindex__last .
H67:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))) <= integer__base__last)) .
H68:   (1 <= num_found__1) -> ((dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H69:   (1 <= num_found__1) -> ((12 + dns_types__header_bits div 8 >= system__min_int)
           and (12 + dns_types__header_bits div 8 <= system__max_int)) .
H70:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H71:   (1 <= num_found__1) -> (8 <> 0) .
H72:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H73:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(replies__1, [
           1]))))) .
H74:   start_byte >= dns_types__packet_bytes_range__first .
H75:   start_byte <= dns_types__packet_bytes_range__last .
H76:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H77:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H78:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H79:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H80:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H81:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H82:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H83:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H84:   dns_types__header_bits div 8 >= system__min_int .
H85:   dns_types__header_bits div 8 <= system__max_int .
H86:   8 <> 0 .
H87:   num_found__1 >= rr_type__numberofrecordstype__first .
H88:   num_found__1 <= rr_type__numberofrecordstype__last .
H89:   answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
H90:   answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
H91:   num_found__1 >= dns_types__unsigned_short__first .
H92:   num_found__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found__1 <= answer_count + 
           rr_type__maxnumrecords .
 

procedure_create_response_ptr_31.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H36:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H37:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H38:   num_found__1 >= rr_type__numberofrecordstype__first .
H39:   num_found__1 <= rr_type__numberofrecordstype__last .
H40:   num_found__1 >= rr_type__numberofrecordstype__first .
H41:   num_found__1 <= rr_type__numberofrecordstype__last .
H42:   num_found__1 >= rr_type__numberofrecordstype__first .
H43:   num_found__1 <= rr_type__numberofrecordstype__last .
H44:   not (num_found__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
H47:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H48:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H49:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H50:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H51:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H52:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H53:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H54:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H55:   dns_types__header_bits div 8 >= system__min_int .
H56:   dns_types__header_bits div 8 <= system__max_int .
H57:   8 <> 0 .
H58:   num_found__1 >= rr_type__numberofrecordstype__first .
H59:   num_found__1 <= rr_type__numberofrecordstype__last .
H60:   answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
H61:   answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
H62:   num_found__1 >= dns_types__unsigned_short__first .
H63:   num_found__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found__1 <= answer_count + 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 448 to finish:

procedure_create_response_ptr_32.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  response_counter + 1 <= num_found .
H123:  response_counter + 1 >= natural__first .
H124:  response_counter + 1 <= natural__last .
H125:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H126:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H127:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H128:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H129:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H130:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H131:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H132:  (rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_domainname(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_domainname(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_domainname(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H133:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H134:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H135:  num_found >= rr_type__numberofrecordstype__first .
H136:  num_found <= rr_type__numberofrecordstype__last .
H137:  response_counter + 1 >= natural__first .
H138:  response_counter + 1 <= natural__last .
H139:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H140:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H141:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H142:  rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H143:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H144:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H145:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H146:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H147:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H148:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H149:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_domainname(element(
           replies, [response_counter + 1]))))) .
H150:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H151:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H152:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H153:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H154:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H155:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H156:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H157:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H158:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H159:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H160:  dns_types__header_bits div 8 >= system__min_int .
H161:  dns_types__header_bits div 8 <= system__max_int .
H162:  8 <> 0 .
H163:  num_found >= rr_type__numberofrecordstype__first .
H164:  num_found <= rr_type__numberofrecordstype__last .
H165:  answer_count + num_found >= dns_types__unsigned_short__first .
H166:  answer_count + num_found <= dns_types__unsigned_short__last .
H167:  num_found >= dns_types__unsigned_short__first .
H168:  num_found <= dns_types__unsigned_short__last .
        ->
C1:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found <= answer_count~ + 
           rr_type__maxnumrecords .
 

procedure_create_response_ptr_33.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   12 >= dns_types__byte__first .
H64:   12 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_domainname(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_domainname(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H86:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H87:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H88:   current_name_length >= rr_type__wirestringtypeindex__first .
H89:   current_name_length <= rr_type__wirestringtypeindex__last .
H90:   current_name_length >= rr_type__wirestringtypeindex__first .
H91:   current_name_length <= rr_type__wirestringtypeindex__last .
H92:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H93:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H94:   current_name_length >= 0 .
H95:   current_name_length <= rr_type__wirestringtypeindex__last .
H96:   current_byte + 7 <= dns_types__packet_bytes_range__last - 6 - 
           current_name_length .
H97:   response_counter >= rr_type__returnedrecordsindextype__first .
H98:   response_counter <= rr_type__returnedrecordsindextype__last .
H99:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H100:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H101:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H102:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H103:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 12))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  response_counter + 1 >= natural__first .
H107:  response_counter + 1 <= natural__last .
H108:  current_byte >= dns_types__packet_bytes_range__first .
H109:  current_byte <= dns_types__packet_bytes_range__last .
H110:  current_name_length >= rr_type__wirestringtypeindex__first .
H111:  current_name_length <= rr_type__wirestringtypeindex__last .
H112:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H113:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H114:  current_name_length >= dns_types__packet_bytes_range__first .
H115:  current_name_length <= dns_types__packet_bytes_range__last .
H116:  current_byte + 12 >= dns_types__packet_bytes_range__base__first .
H117:  current_byte + 12 <= dns_types__packet_bytes_range__base__last .
H118:  num_found >= rr_type__numberofrecordstype__first .
H119:  num_found <= rr_type__numberofrecordstype__last .
H120:  response_counter + 1 >= natural__first .
H121:  response_counter + 1 <= natural__last .
H122:  not (response_counter + 1 <= num_found) .
H123:  num_found >= rr_type__numberofrecordstype__first .
H124:  num_found <= rr_type__numberofrecordstype__last .
H125:  response_counter + 1 >= natural__first .
H126:  response_counter + 1 <= natural__last .
H127:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H128:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H129:  current_name_length >= rr_type__wirestringtypeindex__first .
H130:  current_name_length <= rr_type__wirestringtypeindex__last .
H131:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H132:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H133:  (response_counter + 1 <= num_found) -> ((12 + 
           dns_types__header_bits div 8 >= system__min_int) and (12 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H134:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H135:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H136:  (response_counter + 1 <= num_found) -> ((
           current_byte + 12 + current_name_length >= 
           integer__first) and (current_byte + 12 + 
           current_name_length <= integer__last)) .
H137:  not ((response_counter + 1 <= num_found) and (
           current_byte + 12 + current_name_length < 
           dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H138:  current_byte + 12 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H139:  current_byte + 12 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H140:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H141:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H142:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H143:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H144:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H145:  current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H146:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H147:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H148:  dns_types__header_bits div 8 >= system__min_int .
H149:  dns_types__header_bits div 8 <= system__max_int .
H150:  8 <> 0 .
H151:  num_found >= rr_type__numberofrecordstype__first .
H152:  num_found <= rr_type__numberofrecordstype__last .
H153:  answer_count + num_found >= dns_types__unsigned_short__first .
H154:  answer_count + num_found <= dns_types__unsigned_short__last .
H155:  num_found >= dns_types__unsigned_short__first .
H156:  num_found <= dns_types__unsigned_short__last .
        ->
C1:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 12 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found <= answer_count~ + 
           rr_type__maxnumrecords .
 

