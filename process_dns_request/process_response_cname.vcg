           *******************************************************
                       Semantic Analysis of SPARK Text
                             Examiner GPL Edition

           *******************************************************


            procedure Process_Dns_Request.Process_Response_Cname




For path(s) from start to run-time check associated with statement of line 606:

procedure_process_response_cname_1.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
        ->
C1:    start_byte >= dns_types__packet_bytes_range__first .
C2:    start_byte <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 607:

procedure_process_response_cname_2.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
C2:    rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
 

For path(s) from start to run-time check associated with statement of line 608:

procedure_process_response_cname_3.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
        ->
C1:    rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
C2:    rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
 

For path(s) from start to run-time check associated with statement of line 608:

procedure_process_response_cname_4.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
        ->
C1:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
C2:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 609:

procedure_process_response_cname_5.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
C2:    dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
C3:    12 + dns_types__header_bits div 8 >= system__min_int .
C4:    12 + dns_types__header_bits div 8 <= system__max_int .
C5:    dns_types__header_bits div 8 >= system__min_int .
C6:    dns_types__header_bits div 8 <= system__max_int .
C7:    8 <> 0 .
C8:    start_byte >= integer__first .
C9:    start_byte <= integer__last .
 

For path(s) from start to precondition check associated with statement of line 611:

procedure_process_response_cname_6.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
C2:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
C3:    start_byte + 1 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 1 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
C6:    qname_location >= unsigned_types__unsigned16__first .
C7:    qname_location <= unsigned_types__unsigned16__last .
C8:    start_byte + 1 >= dns_types__packet_bytes_range__base__first .
C9:    start_byte + 1 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to run-time check associated with statement of line 613:

procedure_process_response_cname_7.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    start_byte + 3 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 3 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 3 >= dns_types__packet_bytes_range__base__first .
C6:    start_byte + 3 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to run-time check associated with statement of line 614:

procedure_process_response_cname_8.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    5 >= dns_types__byte__first .
C2:    5 <= dns_types__byte__last .
C3:    start_byte + 4 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 4 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 4 >= dns_types__packet_bytes_range__base__first .
C6:    start_byte + 4 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to run-time check associated with statement of line 616:

procedure_process_response_cname_9.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    start_byte + 5 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 5 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 5 >= dns_types__packet_bytes_range__base__first .
C6:    start_byte + 5 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to run-time check associated with statement of line 617:

procedure_process_response_cname_10.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    1 >= dns_types__byte__first .
C2:    1 <= dns_types__byte__last .
C3:    start_byte + 6 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 6 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 6 >= dns_types__packet_bytes_range__base__first .
C6:    start_byte + 6 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to precondition check associated with statement of line 619:

procedure_process_response_cname_11.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
C2:    fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
C3:    start_byte + 7 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 7 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
C6:    rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
C7:    rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
C8:    start_byte + 7 >= dns_types__packet_bytes_range__base__first .
C9:    start_byte + 7 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to precondition check associated with statement of line 620:

procedure_process_response_cname_12.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
        ->
C1:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
C2:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
C3:    start_byte + 11 >= dns_types__packet_bytes_range__first .
C4:    start_byte + 11 <= dns_types__packet_bytes_range__last .
C5:    start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
C6:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
C7:    rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
C8:    start_byte + 11 >= dns_types__packet_bytes_range__base__first .
C9:    start_byte + 11 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from start to run-time check associated with statement of line 621:

procedure_process_response_cname_13.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + 12 >= dns_types__packet_bytes_range__first .
C2:    start_byte + 12 <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 623:

procedure_process_response_cname_14.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C2:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C3:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C4:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C5:    start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
C6:    start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
C7:    dns_types__header_bits div 8 >= system__min_int .
C8:    dns_types__header_bits div 8 <= system__max_int .
C9:    8 <> 0 .
C10:   start_byte + 12 >= integer__first .
C11:   start_byte + 12 <= integer__last .
 

procedure_process_response_cname_15.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= integer__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= integer__base__last .
C7:    dns_types__header_bits div 8 >= system__min_int .
C8:    dns_types__header_bits div 8 <= system__max_int .
C9:    8 <> 0 .
C10:   start_byte >= integer__first .
C11:   start_byte <= integer__last .
 

For path(s) from start to run-time check associated with statement of line 625:

procedure_process_response_cname_16.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
        ->
C1:    1 >= rr_type__wirestringtypeindex__first .
C2:    1 <= rr_type__wirestringtypeindex__last .
 

procedure_process_response_cname_17.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
        ->
C1:    1 >= rr_type__wirestringtypeindex__first .
C2:    1 <= rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 626:

procedure_process_response_cname_18.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
H141:  1 >= rr_type__wirestringtypeindex__first .
H142:  1 <= rr_type__wirestringtypeindex__last .
H143:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H144:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H145:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H146:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H147:  1 >= rr_type__wirestringtypeindex__first .
H148:  1 <= rr_type__wirestringtypeindex__last .
        ->
C1:    start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
C2:    start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
C3:    dns_types__header_bits div 8 >= system__min_int .
C4:    dns_types__header_bits div 8 <= system__max_int .
C5:    8 <> 0 .
C6:    start_byte + 12 >= integer__first .
C7:    start_byte + 12 <= integer__last .
 

procedure_process_response_cname_19.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
H69:   1 >= rr_type__wirestringtypeindex__first .
H70:   1 <= rr_type__wirestringtypeindex__last .
H71:   start_byte >= dns_types__packet_bytes_range__first .
H72:   start_byte <= dns_types__packet_bytes_range__last .
H73:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H74:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H75:   1 >= rr_type__wirestringtypeindex__first .
H76:   1 <= rr_type__wirestringtypeindex__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= integer__base__first .
C2:    start_byte + dns_types__header_bits div 8 <= integer__base__last .
C3:    dns_types__header_bits div 8 >= system__min_int .
C4:    dns_types__header_bits div 8 <= system__max_int .
C5:    8 <> 0 .
C6:    start_byte >= integer__first .
C7:    start_byte <= integer__last .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 626:

procedure_process_response_cname_20.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
H56:   i + 1 >= rr_type__wirestringtypeindex__first .
H57:   i + 1 <= rr_type__wirestringtypeindex__last .
H58:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H59:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H60:   name_length >= rr_type__wirestringtypeindex__first .
H61:   name_length <= rr_type__wirestringtypeindex__last .
H62:   i + 1 >= rr_type__wirestringtypeindex__first .
H63:   i + 1 <= rr_type__wirestringtypeindex__last .
        ->
C1:    current_byte + 1 + dns_types__header_bits div 8 >= 
           integer__base__first .
C2:    current_byte + 1 + dns_types__header_bits div 8 <= 
           integer__base__last .
C3:    dns_types__header_bits div 8 >= system__min_int .
C4:    dns_types__header_bits div 8 <= system__max_int .
C5:    8 <> 0 .
C6:    current_byte + 1 >= integer__first .
C7:    current_byte + 1 <= integer__last .
 

For path(s) from start to assertion of line 628:

procedure_process_response_cname_21.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
H141:  1 >= rr_type__wirestringtypeindex__first .
H142:  1 <= rr_type__wirestringtypeindex__last .
H143:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H144:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H145:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H146:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H147:  1 >= rr_type__wirestringtypeindex__first .
H148:  1 <= rr_type__wirestringtypeindex__last .
H149:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H150:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H151:  dns_types__header_bits div 8 >= system__min_int .
H152:  dns_types__header_bits div 8 <= system__max_int .
H153:  8 <> 0 .
H154:  start_byte + 12 >= integer__first .
H155:  start_byte + 12 <= integer__last .
H156:  1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) .
H157:  1 < rr_type__wirestringtypeindex__last .
H158:  start_byte + 12 + dns_types__header_bits div 8 < 
           dns_types__packet_size .
        ->
C1:    1 < rr_type__wirestringtypeindex__last .
C2:    1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) .
C3:    fld_ancount(fld_header(output_packet__3)) = 0 .
C4:    start_byte + 12 >= start_byte .
C5:    start_byte + 12 + dns_types__header_bits div 8 < 
           dns_types__packet_size .
C6:    start_byte >= dns_types__packet_bytes_range__first .
C7:    start_byte <= dns_types__packet_bytes_range__last .
C8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
C9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
C10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
C11:   start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C12:   start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C14:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C15:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C16:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C17:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C18:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C19:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C20:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C21:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C22:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C23:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C24:   true .
C25:   true .
C26:   true .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C32:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C33:   true .
C34:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C35:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C36:   start_byte <= dns_types__packet_size .
C37:   fld_ancount(fld_header(output_packet)) = 0 .
 

procedure_process_response_cname_22.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
H69:   1 >= rr_type__wirestringtypeindex__first .
H70:   1 <= rr_type__wirestringtypeindex__last .
H71:   start_byte >= dns_types__packet_bytes_range__first .
H72:   start_byte <= dns_types__packet_bytes_range__last .
H73:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H74:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H75:   1 >= rr_type__wirestringtypeindex__first .
H76:   1 <= rr_type__wirestringtypeindex__last .
H77:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H78:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H79:   dns_types__header_bits div 8 >= system__min_int .
H80:   dns_types__header_bits div 8 <= system__max_int .
H81:   8 <> 0 .
H82:   start_byte >= integer__first .
H83:   start_byte <= integer__last .
H84:   1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) .
H85:   1 < rr_type__wirestringtypeindex__last .
H86:   start_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
        ->
C1:    1 < rr_type__wirestringtypeindex__last .
C2:    1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) .
C3:    fld_ancount(fld_header(output_packet)) = 0 .
C4:    start_byte >= start_byte .
C5:    start_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
C6:    start_byte >= dns_types__packet_bytes_range__first .
C7:    start_byte <= dns_types__packet_bytes_range__last .
C8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
C9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
C10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
C11:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C12:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
C14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
C23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
C24:   true .
C25:   true .
C26:   true .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
C32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
C33:   true .
C34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C36:   start_byte <= dns_types__packet_size .
C37:   fld_ancount(fld_header(output_packet)) = 0 .
 

For path(s) from assertion of line 628 to assertion of line 628:

procedure_process_response_cname_23.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
H56:   i + 1 >= rr_type__wirestringtypeindex__first .
H57:   i + 1 <= rr_type__wirestringtypeindex__last .
H58:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H59:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H60:   name_length >= rr_type__wirestringtypeindex__first .
H61:   name_length <= rr_type__wirestringtypeindex__last .
H62:   i + 1 >= rr_type__wirestringtypeindex__first .
H63:   i + 1 <= rr_type__wirestringtypeindex__last .
H64:   current_byte + 1 + dns_types__header_bits div 8 >= 
           integer__base__first .
H65:   current_byte + 1 + dns_types__header_bits div 8 <= 
           integer__base__last .
H66:   dns_types__header_bits div 8 >= system__min_int .
H67:   dns_types__header_bits div 8 <= system__max_int .
H68:   8 <> 0 .
H69:   current_byte + 1 >= integer__first .
H70:   current_byte + 1 <= integer__last .
H71:   i + 1 <= name_length .
H72:   i + 1 < rr_type__wirestringtypeindex__last .
H73:   current_byte + 1 + dns_types__header_bits div 8 < 
           dns_types__packet_size .
        ->
C1:    i + 1 < rr_type__wirestringtypeindex__last .
C2:    i + 1 <= name_length .
C3:    fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) = 0 .
C4:    current_byte + 1 >= start_byte .
C5:    current_byte + 1 + dns_types__header_bits div 8 < 
           dns_types__packet_size .
C6:    start_byte >= dns_types__packet_bytes_range__first .
C7:    start_byte <= dns_types__packet_bytes_range__last .
C8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
C9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
C10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
C11:   qname_location >= dns_types__qname_ptr_range__first .
C12:   qname_location <= dns_types__qname_ptr_range__last .
C13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i])))), [
           i___1]) >= dns_types__byte__first) and (element(fld_bytes(
           upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i])))), [
           i___1]) <= dns_types__byte__last))) .
C14:   fld_arcount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__unsigned_short__first .
C15:   fld_arcount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__unsigned_short__last .
C16:   fld_nscount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__unsigned_short__first .
C17:   fld_nscount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__unsigned_short__last .
C18:   fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__unsigned_short__first .
C19:   fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__unsigned_short__last .
C20:   fld_qdcount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__unsigned_short__first .
C21:   fld_qdcount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__unsigned_short__last .
C22:   fld_rcode(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__response_code__first .
C23:   fld_rcode(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__response_code__last .
C24:   true .
C25:   true .
C26:   true .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   fld_opcode(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__opcode_type__first .
C32:   fld_opcode(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__opcode_type__last .
C33:   true .
C34:   fld_messageid(fld_header(upf_bytes(output_packet, update(
           fld_bytes(output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) >= 
           dns_types__unsigned_short__first .
C35:   fld_messageid(fld_header(upf_bytes(output_packet, update(
           fld_bytes(output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) <= 
           dns_types__unsigned_short__last .
C36:   start_byte <= dns_types__packet_size .
C37:   fld_ancount(fld_header(output_packet~)) = 0 .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 633:

procedure_process_response_cname_24.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 1 >= dns_types__packet_bytes_range__first .
C2:    current_byte + 1 <= dns_types__packet_bytes_range__last .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 634:

procedure_process_response_cname_25.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
        ->
C1:    element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
C2:    element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
C3:    element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
C4:    element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
C5:    i >= rr_type__wirestringtypeindex__first .
C6:    i <= rr_type__wirestringtypeindex__last .
C7:    rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
C8:    rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
C9:    current_byte + 1 >= dns_types__packet_bytes_range__first .
C10:   current_byte + 1 <= dns_types__packet_bytes_range__last .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 635:

procedure_process_response_cname_26.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
        ->
C1:    i + 1 >= rr_type__wirestringtypeindex__first .
C2:    i + 1 <= rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 637:

procedure_process_response_cname_27.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
H141:  1 >= rr_type__wirestringtypeindex__first .
H142:  1 <= rr_type__wirestringtypeindex__last .
H143:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H144:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H145:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H146:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H147:  1 >= rr_type__wirestringtypeindex__first .
H148:  1 <= rr_type__wirestringtypeindex__last .
H149:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H150:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H151:  dns_types__header_bits div 8 >= system__min_int .
H152:  dns_types__header_bits div 8 <= system__max_int .
H153:  8 <> 0 .
H154:  start_byte + 12 >= integer__first .
H155:  start_byte + 12 <= integer__last .
H156:  not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + 12 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H157:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H158:  start_byte + 12 <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_process_response_cname_28.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
H69:   1 >= rr_type__wirestringtypeindex__first .
H70:   1 <= rr_type__wirestringtypeindex__last .
H71:   start_byte >= dns_types__packet_bytes_range__first .
H72:   start_byte <= dns_types__packet_bytes_range__last .
H73:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H74:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H75:   1 >= rr_type__wirestringtypeindex__first .
H76:   1 <= rr_type__wirestringtypeindex__last .
H77:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H78:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H79:   dns_types__header_bits div 8 >= system__min_int .
H80:   dns_types__header_bits div 8 <= system__max_int .
H81:   8 <> 0 .
H82:   start_byte >= integer__first .
H83:   start_byte <= integer__last .
H84:   not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H85:   start_byte >= dns_types__packet_bytes_range__first .
H86:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 637:

procedure_process_response_cname_29.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
H56:   i + 1 >= rr_type__wirestringtypeindex__first .
H57:   i + 1 <= rr_type__wirestringtypeindex__last .
H58:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H59:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H60:   name_length >= rr_type__wirestringtypeindex__first .
H61:   name_length <= rr_type__wirestringtypeindex__last .
H62:   i + 1 >= rr_type__wirestringtypeindex__first .
H63:   i + 1 <= rr_type__wirestringtypeindex__last .
H64:   current_byte + 1 + dns_types__header_bits div 8 >= 
           integer__base__first .
H65:   current_byte + 1 + dns_types__header_bits div 8 <= 
           integer__base__last .
H66:   dns_types__header_bits div 8 >= system__min_int .
H67:   dns_types__header_bits div 8 <= system__max_int .
H68:   8 <> 0 .
H69:   current_byte + 1 >= integer__first .
H70:   current_byte + 1 <= integer__last .
H71:   not ((i + 1 <= name_length) and ((i + 1 < 
           rr_type__wirestringtypeindex__last) and (
           current_byte + 1 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H72:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H73:   current_byte + 1 <= dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from start to run-time check associated with statement of line 638:

procedure_process_response_cname_30.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
H141:  1 >= rr_type__wirestringtypeindex__first .
H142:  1 <= rr_type__wirestringtypeindex__last .
H143:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H144:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H145:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H146:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H147:  1 >= rr_type__wirestringtypeindex__first .
H148:  1 <= rr_type__wirestringtypeindex__last .
H149:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H150:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H151:  dns_types__header_bits div 8 >= system__min_int .
H152:  dns_types__header_bits div 8 <= system__max_int .
H153:  8 <> 0 .
H154:  start_byte + 12 >= integer__first .
H155:  start_byte + 12 <= integer__last .
H156:  not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + 12 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H157:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H158:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H159:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H160:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H161:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H162:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H163:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H164:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H165:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H166:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H167:  dns_types__header_bits div 8 >= system__min_int .
H168:  dns_types__header_bits div 8 <= system__max_int .
H169:  8 <> 0 .
        ->
C1:    fld_ancount(fld_header(output_packet__3)) + 1 >= 
           dns_types__unsigned_short__first .
C2:    fld_ancount(fld_header(output_packet__3)) + 1 <= 
           dns_types__unsigned_short__last .
 

procedure_process_response_cname_31.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
H69:   1 >= rr_type__wirestringtypeindex__first .
H70:   1 <= rr_type__wirestringtypeindex__last .
H71:   start_byte >= dns_types__packet_bytes_range__first .
H72:   start_byte <= dns_types__packet_bytes_range__last .
H73:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H74:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H75:   1 >= rr_type__wirestringtypeindex__first .
H76:   1 <= rr_type__wirestringtypeindex__last .
H77:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H78:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H79:   dns_types__header_bits div 8 >= system__min_int .
H80:   dns_types__header_bits div 8 <= system__max_int .
H81:   8 <> 0 .
H82:   start_byte >= integer__first .
H83:   start_byte <= integer__last .
H84:   not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H85:   start_byte >= dns_types__packet_bytes_range__first .
H86:   start_byte <= dns_types__packet_bytes_range__last .
H87:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H88:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H89:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H90:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H91:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H92:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H93:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H94:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H95:   dns_types__header_bits div 8 >= system__min_int .
H96:   dns_types__header_bits div 8 <= system__max_int .
H97:   8 <> 0 .
        ->
C1:    fld_ancount(fld_header(output_packet)) + 1 >= 
           dns_types__unsigned_short__first .
C2:    fld_ancount(fld_header(output_packet)) + 1 <= 
           dns_types__unsigned_short__last .
 

For path(s) from assertion of line 628 to run-time check associated with statement of line 638:

procedure_process_response_cname_32.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
H56:   i + 1 >= rr_type__wirestringtypeindex__first .
H57:   i + 1 <= rr_type__wirestringtypeindex__last .
H58:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H59:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H60:   name_length >= rr_type__wirestringtypeindex__first .
H61:   name_length <= rr_type__wirestringtypeindex__last .
H62:   i + 1 >= rr_type__wirestringtypeindex__first .
H63:   i + 1 <= rr_type__wirestringtypeindex__last .
H64:   current_byte + 1 + dns_types__header_bits div 8 >= 
           integer__base__first .
H65:   current_byte + 1 + dns_types__header_bits div 8 <= 
           integer__base__last .
H66:   dns_types__header_bits div 8 >= system__min_int .
H67:   dns_types__header_bits div 8 <= system__max_int .
H68:   8 <> 0 .
H69:   current_byte + 1 >= integer__first .
H70:   current_byte + 1 <= integer__last .
H71:   not ((i + 1 <= name_length) and ((i + 1 < 
           rr_type__wirestringtypeindex__last) and (
           current_byte + 1 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H72:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H73:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H74:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H75:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H76:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H77:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H78:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H79:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H80:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H81:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H82:   dns_types__header_bits div 8 >= system__min_int .
H83:   dns_types__header_bits div 8 <= system__max_int .
H84:   8 <> 0 .
        ->
C1:    fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) + 1 >= 
           dns_types__unsigned_short__first .
C2:    fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) + 1 <= 
           dns_types__unsigned_short__last .
 

For path(s) from start to finish:

procedure_process_response_cname_33.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H59:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H60:   start_byte + 1 >= dns_types__packet_bytes_range__first .
H61:   start_byte + 1 <= dns_types__packet_bytes_range__last .
H62:   start_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H63:   qname_location >= unsigned_types__unsigned16__first .
H64:   qname_location <= unsigned_types__unsigned16__last .
H65:   start_byte + 1 >= dns_types__packet_bytes_range__base__first .
H66:   start_byte + 1 <= dns_types__packet_bytes_range__base__last .
H67:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__1), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__1), [i___1]) <= dns_types__byte__last))) .
H68:   fld_header(output_packet__1) = fld_header(
           output_packet) .
H69:   output_packet__1 = upf_bytes(output_packet, fld_bytes(
           output_packet__1)) .
H70:   0 >= dns_types__byte__first .
H71:   0 <= dns_types__byte__last .
H72:   start_byte + 3 >= dns_types__packet_bytes_range__first .
H73:   start_byte + 3 <= dns_types__packet_bytes_range__last .
H74:   start_byte + 3 >= dns_types__packet_bytes_range__base__first .
H75:   start_byte + 3 <= dns_types__packet_bytes_range__base__last .
H76:   5 >= dns_types__byte__first .
H77:   5 <= dns_types__byte__last .
H78:   start_byte + 4 >= dns_types__packet_bytes_range__first .
H79:   start_byte + 4 <= dns_types__packet_bytes_range__last .
H80:   start_byte + 4 >= dns_types__packet_bytes_range__base__first .
H81:   start_byte + 4 <= dns_types__packet_bytes_range__base__last .
H82:   0 >= dns_types__byte__first .
H83:   0 <= dns_types__byte__last .
H84:   start_byte + 5 >= dns_types__packet_bytes_range__first .
H85:   start_byte + 5 <= dns_types__packet_bytes_range__last .
H86:   start_byte + 5 >= dns_types__packet_bytes_range__base__first .
H87:   start_byte + 5 <= dns_types__packet_bytes_range__base__last .
H88:   1 >= dns_types__byte__first .
H89:   1 <= dns_types__byte__last .
H90:   start_byte + 6 >= dns_types__packet_bytes_range__first .
H91:   start_byte + 6 <= dns_types__packet_bytes_range__last .
H92:   start_byte + 6 >= dns_types__packet_bytes_range__base__first .
H93:   start_byte + 6 <= dns_types__packet_bytes_range__base__last .
H94:   start_byte >= dns_types__packet_bytes_range__first .
H95:   start_byte <= dns_types__packet_bytes_range__last .
H96:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned32__first .
H97:   fld_ttlinseconds(fld_inherit(element(cnames, [
           rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned32__last .
H98:   start_byte + 7 >= dns_types__packet_bytes_range__first .
H99:   start_byte + 7 <= dns_types__packet_bytes_range__last .
H100:  start_byte + 7 <= dns_types__packet_bytes_range__last - 3 .
H101:  rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H102:  rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H103:  start_byte + 7 >= dns_types__packet_bytes_range__base__first .
H104:  start_byte + 7 <= dns_types__packet_bytes_range__base__last .
H105:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H106:  fld_header(output_packet__2) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1))) .
H107:  output_packet__2 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0)), update(fld_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__1, update(fld_bytes(
           output_packet__1), [start_byte + 3], 0))), [
           start_byte + 4], 5)), update(fld_bytes(upf_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0)), update(fld_bytes(upf_bytes(
           output_packet__1, update(fld_bytes(output_packet__1), [
           start_byte + 3], 0))), [start_byte + 4], 5))), [
           start_byte + 5], 0))), [start_byte + 6], 1)), fld_bytes(
           output_packet__2)) .
H108:  start_byte >= dns_types__packet_bytes_range__first .
H109:  start_byte <= dns_types__packet_bytes_range__last .
H110:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H111:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H112:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H113:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H114:  start_byte + 11 >= dns_types__packet_bytes_range__first .
H115:  start_byte + 11 <= dns_types__packet_bytes_range__last .
H116:  start_byte + 11 <= dns_types__packet_bytes_range__last - 1 .
H117:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           unsigned_types__unsigned16__first .
H118:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           unsigned_types__unsigned16__last .
H119:  start_byte + 11 >= dns_types__packet_bytes_range__base__first .
H120:  start_byte + 11 <= dns_types__packet_bytes_range__base__last .
H121:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H122:  fld_header(output_packet__3) = fld_header(output_packet__2) .
H123:  output_packet__3 = upf_bytes(output_packet__2, fld_bytes(
           output_packet__3)) .
H124:  start_byte >= dns_types__packet_bytes_range__first .
H125:  start_byte <= dns_types__packet_bytes_range__last .
H126:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H127:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H128:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H129:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H130:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H131:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H132:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H133:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H134:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H135:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H136:  dns_types__header_bits div 8 >= system__min_int .
H137:  dns_types__header_bits div 8 <= system__max_int .
H138:  8 <> 0 .
H139:  start_byte + 12 >= integer__first .
H140:  start_byte + 12 <= integer__last .
H141:  1 >= rr_type__wirestringtypeindex__first .
H142:  1 <= rr_type__wirestringtypeindex__last .
H143:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H144:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H145:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H146:  rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H147:  1 >= rr_type__wirestringtypeindex__first .
H148:  1 <= rr_type__wirestringtypeindex__last .
H149:  start_byte + 12 + dns_types__header_bits div 8 >= 
           integer__base__first .
H150:  start_byte + 12 + dns_types__header_bits div 8 <= 
           integer__base__last .
H151:  dns_types__header_bits div 8 >= system__min_int .
H152:  dns_types__header_bits div 8 <= system__max_int .
H153:  8 <> 0 .
H154:  start_byte + 12 >= integer__first .
H155:  start_byte + 12 <= integer__last .
H156:  not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + 12 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H157:  start_byte + 12 >= dns_types__packet_bytes_range__first .
H158:  start_byte + 12 <= dns_types__packet_bytes_range__last .
H159:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H160:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H161:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H162:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H163:  start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H164:  start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H165:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H166:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H167:  dns_types__header_bits div 8 >= system__min_int .
H168:  dns_types__header_bits div 8 <= system__max_int .
H169:  8 <> 0 .
H170:  fld_ancount(fld_header(output_packet__3)) + 1 >= 
           dns_types__unsigned_short__first .
H171:  fld_ancount(fld_header(output_packet__3)) + 1 <= 
           dns_types__unsigned_short__last .
        ->
C1:    start_byte + 12 + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + 12 + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    fld_ancount(fld_header(upf_header(output_packet__3, upf_ancount(
           fld_header(output_packet__3), fld_ancount(fld_header(
           output_packet__3)) + 1)))) <= 1 .
 

procedure_process_response_cname_34.
H1:    start_byte <= dns_types__packet_size .
H2:    fld_ancount(fld_header(output_packet)) = 0 .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H6:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H7:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H8:    qname_location >= dns_types__qname_ptr_range__first .
H9:    qname_location <= dns_types__qname_ptr_range__last .
H10:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H11:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H20:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H29:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H30:   true .
H31:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H32:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H33:   start_byte >= dns_types__packet_bytes_range__first .
H34:   start_byte <= dns_types__packet_bytes_range__last .
H35:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H36:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H37:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H38:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H39:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H40:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H41:   (rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))]) = 0) and (
          for_all(q_: integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) - 1)) -> (element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [q_]) <> 0)))) .
H42:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H43:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H44:   start_byte >= dns_types__packet_bytes_range__first .
H45:   start_byte <= dns_types__packet_bytes_range__last .
H46:   dns_types__packet_size - (12 + dns_types__header_bits div 8) >= system__min_int .
H47:   dns_types__packet_size - (12 + dns_types__header_bits div 8) <= system__max_int .
H48:   12 + dns_types__header_bits div 8 >= system__min_int .
H49:   12 + dns_types__header_bits div 8 <= system__max_int .
H50:   dns_types__header_bits div 8 >= system__min_int .
H51:   dns_types__header_bits div 8 <= system__max_int .
H52:   8 <> 0 .
H53:   start_byte >= integer__first .
H54:   start_byte <= integer__last .
H55:   not (start_byte < dns_types__packet_size - (12 + 
           dns_types__header_bits div 8)) .
H56:   start_byte >= dns_types__packet_bytes_range__first .
H57:   start_byte <= dns_types__packet_bytes_range__last .
H58:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H59:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H60:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H61:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H62:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H63:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H64:   dns_types__header_bits div 8 >= system__min_int .
H65:   dns_types__header_bits div 8 <= system__max_int .
H66:   8 <> 0 .
H67:   start_byte >= integer__first .
H68:   start_byte <= integer__last .
H69:   1 >= rr_type__wirestringtypeindex__first .
H70:   1 <= rr_type__wirestringtypeindex__last .
H71:   start_byte >= dns_types__packet_bytes_range__first .
H72:   start_byte <= dns_types__packet_bytes_range__last .
H73:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) >= 
           rr_type__wirestringtypeindex__first .
H74:   rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first]))) <= 
           rr_type__wirestringtypeindex__last .
H75:   1 >= rr_type__wirestringtypeindex__first .
H76:   1 <= rr_type__wirestringtypeindex__last .
H77:   start_byte + dns_types__header_bits div 8 >= integer__base__first .
H78:   start_byte + dns_types__header_bits div 8 <= integer__base__last .
H79:   dns_types__header_bits div 8 >= system__min_int .
H80:   dns_types__header_bits div 8 <= system__max_int .
H81:   8 <> 0 .
H82:   start_byte >= integer__first .
H83:   start_byte <= integer__last .
H84:   not ((1 <= rr_type__wirenamelength(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])))) and ((
           1 < rr_type__wirestringtypeindex__last) and (
           start_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H85:   start_byte >= dns_types__packet_bytes_range__first .
H86:   start_byte <= dns_types__packet_bytes_range__last .
H87:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H88:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H89:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H90:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H91:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H92:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H93:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H94:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H95:   dns_types__header_bits div 8 >= system__min_int .
H96:   dns_types__header_bits div 8 <= system__max_int .
H97:   8 <> 0 .
H98:   fld_ancount(fld_header(output_packet)) + 1 >= 
           dns_types__unsigned_short__first .
H99:   fld_ancount(fld_header(output_packet)) + 1 <= 
           dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    fld_ancount(fld_header(upf_header(output_packet, upf_ancount(
           fld_header(output_packet), fld_ancount(fld_header(
           output_packet)) + 1)))) <= 1 .
 

For path(s) from assertion of line 628 to finish:

procedure_process_response_cname_35.
H1:    i < rr_type__wirestringtypeindex__last .
H2:    i <= name_length .
H3:    fld_ancount(fld_header(output_packet)) = 0 .
H4:    current_byte >= start_byte .
H5:    current_byte + dns_types__header_bits div 8 < 
           dns_types__packet_size .
H6:    start_byte >= dns_types__packet_bytes_range__first .
H7:    start_byte <= dns_types__packet_bytes_range__last .
H8:    for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) >= character__first) and (element(
           fld_canonicaldomainname(element(cnames, [i___1])), [
           i___2]) <= character__last))))) .
H9:    for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(cnames, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           cnames, [i___1]))) <= rr_type__classtype__last))) .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(cnames, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   start_byte <= dns_types__packet_size .
H37:   fld_ancount(fld_header(output_packet~)) = 0 .
H38:   current_byte >= dns_types__packet_bytes_range__first .
H39:   current_byte <= dns_types__packet_bytes_range__last .
H40:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H41:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H42:   i >= rr_type__wirestringtypeindex__first .
H43:   i <= rr_type__wirestringtypeindex__last .
H44:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H45:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H46:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) >= 
           dns_types__byte__first .
H47:   element(fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]) <= 
           dns_types__byte__last .
H48:   i >= rr_type__wirestringtypeindex__first .
H49:   i <= rr_type__wirestringtypeindex__last .
H50:   rr_type__returnedrecordsindextype__first >= 
           rr_type__returnedrecordsindextype__first .
H51:   rr_type__returnedrecordsindextype__first <= 
           rr_type__returnedrecordsindextype__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H54:   i >= rr_type__wirestringtypeindex__first .
H55:   i <= rr_type__wirestringtypeindex__last .
H56:   i + 1 >= rr_type__wirestringtypeindex__first .
H57:   i + 1 <= rr_type__wirestringtypeindex__last .
H58:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H59:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H60:   name_length >= rr_type__wirestringtypeindex__first .
H61:   name_length <= rr_type__wirestringtypeindex__last .
H62:   i + 1 >= rr_type__wirestringtypeindex__first .
H63:   i + 1 <= rr_type__wirestringtypeindex__last .
H64:   current_byte + 1 + dns_types__header_bits div 8 >= 
           integer__base__first .
H65:   current_byte + 1 + dns_types__header_bits div 8 <= 
           integer__base__last .
H66:   dns_types__header_bits div 8 >= system__min_int .
H67:   dns_types__header_bits div 8 <= system__max_int .
H68:   8 <> 0 .
H69:   current_byte + 1 >= integer__first .
H70:   current_byte + 1 <= integer__last .
H71:   not ((i + 1 <= name_length) and ((i + 1 < 
           rr_type__wirestringtypeindex__last) and (
           current_byte + 1 + dns_types__header_bits div 8 < 
           dns_types__packet_size))) .
H72:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H73:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H74:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H75:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H76:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H77:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H78:   current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H79:   current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H80:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H81:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H82:   dns_types__header_bits div 8 >= system__min_int .
H83:   dns_types__header_bits div 8 <= system__max_int .
H84:   8 <> 0 .
H85:   fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) + 1 >= 
           dns_types__unsigned_short__first .
H86:   fld_ancount(fld_header(upf_bytes(output_packet, update(fld_bytes(
           output_packet), [current_byte + 1], element(
           fld_canonicaldomainname(element(cnames, [
           rr_type__returnedrecordsindextype__first])), [i]))))) + 1 <= 
           dns_types__unsigned_short__last .
        ->
C1:    current_byte + 1 + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 1 + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    fld_ancount(fld_header(upf_header(upf_bytes(
           output_packet, update(fld_bytes(output_packet), [
           current_byte + 1], element(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])), [
           i]))), upf_ancount(fld_header(upf_bytes(
           output_packet, update(fld_bytes(output_packet), [
           current_byte + 1], element(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])), [
           i])))), fld_ancount(fld_header(upf_bytes(
           output_packet, update(fld_bytes(output_packet), [
           current_byte + 1], element(fld_canonicaldomainname(element(
           cnames, [rr_type__returnedrecordsindextype__first])), [
           i]))))) + 1)))) <= 1 .
 

