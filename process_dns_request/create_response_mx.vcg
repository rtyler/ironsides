           *******************************************************
                       Semantic Analysis of SPARK Text
                             Examiner GPL Edition

           *******************************************************


              procedure Process_Dns_Request.Create_Response_MX




For path(s) from start to run-time check associated with statement of line 494:

procedure_create_response_mx_1.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
        ->
C1:    0 >= dns_types__qname_ptr_range__first .
C2:    0 <= dns_types__qname_ptr_range__last .
 

For path(s) from start to run-time check associated with statement of line 495:

procedure_create_response_mx_2.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
        ->
C1:    start_byte >= dns_types__packet_bytes_range__first .
C2:    start_byte <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 497:

procedure_create_response_mx_3.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    num_found__1 >= rr_type__numberofrecordstype__first .
C2:    num_found__1 <= rr_type__numberofrecordstype__last .
 

For path(s) from start to run-time check associated with statement of line 503:

procedure_create_response_mx_4.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
        ->
C1:    1 >= natural__first .
C2:    1 <= natural__last .
 

For path(s) from start to run-time check associated with statement of line 504:

procedure_create_response_mx_5.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
        ->
C1:    1 >= rr_type__returnedrecordsindextype__first .
C2:    1 <= rr_type__returnedrecordsindextype__last .
 

For path(s) from start to run-time check associated with statement of line 504:

procedure_create_response_mx_6.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
        ->
C1:    rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
C2:    rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 505:

procedure_create_response_mx_7.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
H61:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H62:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H63:   num_found__1 >= rr_type__numberofrecordstype__first .
H64:   num_found__1 <= rr_type__numberofrecordstype__last .
H65:   1 >= natural__first .
H66:   1 <= natural__last .
H67:   start_byte >= dns_types__packet_bytes_range__first .
H68:   start_byte <= dns_types__packet_bytes_range__last .
H69:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H70:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
        ->
C1:    (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) <= integer__base__last)) .
C2:    (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (1 <= num_found__1) -> ((14 + dns_types__header_bits div 8 >= system__min_int)
           and (14 + dns_types__header_bits div 8 <= system__max_int)) .
C4:    (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
C5:    (1 <= num_found__1) -> (8 <> 0) .
C6:    (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 505:

procedure_create_response_mx_8.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H152:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H153:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H154:  num_found >= rr_type__numberofrecordstype__first .
H155:  num_found <= rr_type__numberofrecordstype__last .
H156:  response_counter + 1 >= natural__first .
H157:  response_counter + 1 <= natural__last .
H158:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H159:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H160:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H161:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
        ->
C1:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
C2:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
C4:    (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
C5:    (response_counter + 1 <= num_found) -> (8 <> 0) .
C6:    (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
 

procedure_create_response_mx_9.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  not (response_counter + 1 <= num_found) .
H141:  num_found >= rr_type__numberofrecordstype__first .
H142:  num_found <= rr_type__numberofrecordstype__last .
H143:  response_counter + 1 >= natural__first .
H144:  response_counter + 1 <= natural__last .
H145:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H146:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H147:  current_name_length >= rr_type__wirestringtypeindex__first .
H148:  current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
C2:    (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
C3:    (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
C4:    (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
C5:    (response_counter + 1 <= num_found) -> (8 <> 0) .
C6:    (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
 

For path(s) from start to assertion of line 508:

procedure_create_response_mx_10.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
H61:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H62:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H63:   num_found__1 >= rr_type__numberofrecordstype__first .
H64:   num_found__1 <= rr_type__numberofrecordstype__last .
H65:   1 >= natural__first .
H66:   1 <= natural__last .
H67:   start_byte >= dns_types__packet_bytes_range__first .
H68:   start_byte <= dns_types__packet_bytes_range__last .
H69:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H70:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H71:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) <= integer__base__last)) .
H72:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H73:   (1 <= num_found__1) -> ((14 + dns_types__header_bits div 8 >= system__min_int)
           and (14 + dns_types__header_bits div 8 <= system__max_int)) .
H74:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H75:   (1 <= num_found__1) -> (8 <> 0) .
H76:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H77:   1 <= num_found__1 .
H78:   start_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) .
        ->
C1:    1 >= 1 .
C2:    1 <= num_found__1 .
C3:    rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= 1 .
C4:    rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
C5:    num_found__1 <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    start_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) .
C10:   start_byte >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 508 to assertion of line 508:

procedure_create_response_mx_11.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H152:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H153:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H154:  num_found >= rr_type__numberofrecordstype__first .
H155:  num_found <= rr_type__numberofrecordstype__last .
H156:  response_counter + 1 >= natural__first .
H157:  response_counter + 1 <= natural__last .
H158:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H159:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H160:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H161:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H162:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H163:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H164:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H165:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H166:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H167:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H168:  response_counter + 1 <= num_found .
H169:  current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) .
        ->
C1:    response_counter + 1 >= 1 .
C2:    response_counter + 1 <= num_found .
C3:    rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 1 .
C4:    rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
C5:    num_found <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count~ .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) .
C10:   current_byte + 14 + current_name_length >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

procedure_create_response_mx_12.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  not (response_counter + 1 <= num_found) .
H141:  num_found >= rr_type__numberofrecordstype__first .
H142:  num_found <= rr_type__numberofrecordstype__last .
H143:  response_counter + 1 >= natural__first .
H144:  response_counter + 1 <= natural__last .
H145:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H146:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H147:  current_name_length >= rr_type__wirestringtypeindex__first .
H148:  current_name_length <= rr_type__wirestringtypeindex__last .
H149:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H150:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H151:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H152:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H153:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H154:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H155:  response_counter + 1 <= num_found .
H156:  current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
        ->
C1:    response_counter + 1 >= 1 .
C2:    response_counter + 1 <= num_found .
C3:    current_name_length >= 1 .
C4:    current_name_length <= rr_type__wirestringtypeindex__last .
C5:    num_found <= rr_type__maxnumrecords .
C6:    start_byte <= dns_types__packet_size .
C7:    answer_count = answer_count~ .
C8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C9:    current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
C10:   current_byte + 14 + current_name_length >= 0 .
C11:   start_byte >= dns_types__packet_bytes_range__first .
C12:   start_byte <= dns_types__packet_bytes_range__last .
C13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C14:   qname_location >= dns_types__qname_ptr_range__first .
C15:   qname_location <= dns_types__qname_ptr_range__last .
C16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C17:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C18:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C19:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C20:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C21:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C22:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C23:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C24:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C25:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C26:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   true .
C32:   true .
C33:   true .
C34:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C35:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C36:   true .
C37:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C38:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C39:   answer_count >= dns_types__unsigned_short__first .
C40:   answer_count <= dns_types__unsigned_short__last .
C41:   start_byte <= dns_types__packet_size .
C42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 508 to precondition check associated with statement of line 518:

procedure_create_response_mx_13.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
C2:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
C3:    current_byte + 1 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 1 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
C6:    qname_location >= unsigned_types__unsigned16__first .
C7:    qname_location <= unsigned_types__unsigned16__last .
C8:    current_byte + 1 >= dns_types__packet_bytes_range__base__first .
C9:    current_byte + 1 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 520:

procedure_create_response_mx_14.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 3 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 3 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 3 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 3 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 521:

procedure_create_response_mx_15.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    15 >= dns_types__byte__first .
C2:    15 <= dns_types__byte__last .
C3:    current_byte + 4 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 4 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 4 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 4 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 523:

procedure_create_response_mx_16.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 5 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 5 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 5 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 5 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 524:

procedure_create_response_mx_17.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    1 >= dns_types__byte__first .
C2:    1 <= dns_types__byte__last .
C3:    current_byte + 6 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 6 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 6 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 6 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 525:

procedure_create_response_mx_18.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C2:    current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C3:    current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
C4:    current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
C5:    current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
C12:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
C13:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
C14:   response_counter >= rr_type__returnedrecordsindextype__first .
C15:   response_counter <= rr_type__returnedrecordsindextype__last .
 

For path(s) from assertion of line 508 to precondition check associated with statement of line 527:

procedure_create_response_mx_19.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    current_name_length >= rr_type__wirestringtypeindex__first .
C2:    current_name_length <= rr_type__wirestringtypeindex__last .
C3:    current_byte + 7 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 7 <= dns_types__packet_bytes_range__last .
C5:    current_name_length >= 0 .
C6:    current_name_length <= rr_type__wirestringtypeindex__last .
C7:    current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
C8:    response_counter >= rr_type__returnedrecordsindextype__first .
C9:    response_counter <= rr_type__returnedrecordsindextype__last .
C10:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
C11:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 529:

procedure_create_response_mx_20.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
        ->
C1:    response_counter + 1 >= natural__first .
C2:    response_counter + 1 <= natural__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 530:

procedure_create_response_mx_21.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
        ->
C1:    current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
C2:    current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
C3:    current_name_length >= dns_types__packet_bytes_range__first .
C4:    current_name_length <= dns_types__packet_bytes_range__last .
C5:    current_byte + 14 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 14 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 532:

procedure_create_response_mx_22.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
        ->
C1:    response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
C2:    response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 532:

procedure_create_response_mx_23.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
        ->
C1:    rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
C2:    rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
 

For path(s) from start to run-time check associated with statement of line 536:

procedure_create_response_mx_24.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
H61:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H62:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H63:   num_found__1 >= rr_type__numberofrecordstype__first .
H64:   num_found__1 <= rr_type__numberofrecordstype__last .
H65:   1 >= natural__first .
H66:   1 <= natural__last .
H67:   start_byte >= dns_types__packet_bytes_range__first .
H68:   start_byte <= dns_types__packet_bytes_range__last .
H69:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H70:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H71:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) <= integer__base__last)) .
H72:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H73:   (1 <= num_found__1) -> ((14 + dns_types__header_bits div 8 >= system__min_int)
           and (14 + dns_types__header_bits div 8 <= system__max_int)) .
H74:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H75:   (1 <= num_found__1) -> (8 <> 0) .
H76:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H77:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))))) .
H78:   start_byte >= dns_types__packet_bytes_range__first .
H79:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_create_response_mx_25.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   not (num_found__1 >= 1) .
H48:   start_byte >= dns_types__packet_bytes_range__first .
H49:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 536:

procedure_create_response_mx_26.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H152:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H153:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H154:  num_found >= rr_type__numberofrecordstype__first .
H155:  num_found <= rr_type__numberofrecordstype__last .
H156:  response_counter + 1 >= natural__first .
H157:  response_counter + 1 <= natural__last .
H158:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H159:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H160:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H161:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H162:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H163:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H164:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H165:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H166:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H167:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H168:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))))) .
H169:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H170:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_create_response_mx_27.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  not (response_counter + 1 <= num_found) .
H141:  num_found >= rr_type__numberofrecordstype__first .
H142:  num_found <= rr_type__numberofrecordstype__last .
H143:  response_counter + 1 >= natural__first .
H144:  response_counter + 1 <= natural__last .
H145:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H146:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H147:  current_name_length >= rr_type__wirestringtypeindex__first .
H148:  current_name_length <= rr_type__wirestringtypeindex__last .
H149:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H150:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H151:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H152:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H153:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H154:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H155:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H156:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H157:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from start to run-time check associated with statement of line 537:

procedure_create_response_mx_28.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
H61:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H62:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H63:   num_found__1 >= rr_type__numberofrecordstype__first .
H64:   num_found__1 <= rr_type__numberofrecordstype__last .
H65:   1 >= natural__first .
H66:   1 <= natural__last .
H67:   start_byte >= dns_types__packet_bytes_range__first .
H68:   start_byte <= dns_types__packet_bytes_range__last .
H69:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H70:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H71:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) <= integer__base__last)) .
H72:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H73:   (1 <= num_found__1) -> ((14 + dns_types__header_bits div 8 >= system__min_int)
           and (14 + dns_types__header_bits div 8 <= system__max_int)) .
H74:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H75:   (1 <= num_found__1) -> (8 <> 0) .
H76:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H77:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))))) .
H78:   start_byte >= dns_types__packet_bytes_range__first .
H79:   start_byte <= dns_types__packet_bytes_range__last .
H80:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H81:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H82:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H83:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H84:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H85:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H86:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H87:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H88:   dns_types__header_bits div 8 >= system__min_int .
H89:   dns_types__header_bits div 8 <= system__max_int .
H90:   8 <> 0 .
H91:   num_found__1 >= rr_type__numberofrecordstype__first .
H92:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
C3:    num_found__1 >= dns_types__unsigned_short__first .
C4:    num_found__1 <= dns_types__unsigned_short__last .
 

procedure_create_response_mx_29.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   not (num_found__1 >= 1) .
H48:   start_byte >= dns_types__packet_bytes_range__first .
H49:   start_byte <= dns_types__packet_bytes_range__last .
H50:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H51:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H52:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H53:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H54:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H55:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H56:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H57:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H58:   dns_types__header_bits div 8 >= system__min_int .
H59:   dns_types__header_bits div 8 <= system__max_int .
H60:   8 <> 0 .
H61:   num_found__1 >= rr_type__numberofrecordstype__first .
H62:   num_found__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
C3:    num_found__1 >= dns_types__unsigned_short__first .
C4:    num_found__1 <= dns_types__unsigned_short__last .
 

For path(s) from assertion of line 508 to run-time check associated with statement of line 537:

procedure_create_response_mx_30.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H152:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H153:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H154:  num_found >= rr_type__numberofrecordstype__first .
H155:  num_found <= rr_type__numberofrecordstype__last .
H156:  response_counter + 1 >= natural__first .
H157:  response_counter + 1 <= natural__last .
H158:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H159:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H160:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H161:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H162:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H163:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H164:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H165:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H166:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H167:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H168:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))))) .
H169:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H170:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H171:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H172:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H173:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H174:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H175:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H176:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H177:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H178:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H179:  dns_types__header_bits div 8 >= system__min_int .
H180:  dns_types__header_bits div 8 <= system__max_int .
H181:  8 <> 0 .
H182:  num_found >= rr_type__numberofrecordstype__first .
H183:  num_found <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found >= dns_types__unsigned_short__first .
C2:    answer_count + num_found <= dns_types__unsigned_short__last .
C3:    num_found >= dns_types__unsigned_short__first .
C4:    num_found <= dns_types__unsigned_short__last .
 

procedure_create_response_mx_31.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  not (response_counter + 1 <= num_found) .
H141:  num_found >= rr_type__numberofrecordstype__first .
H142:  num_found <= rr_type__numberofrecordstype__last .
H143:  response_counter + 1 >= natural__first .
H144:  response_counter + 1 <= natural__last .
H145:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H146:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H147:  current_name_length >= rr_type__wirestringtypeindex__first .
H148:  current_name_length <= rr_type__wirestringtypeindex__last .
H149:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H150:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H151:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H152:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H153:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H154:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H155:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H156:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H157:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H158:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H159:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H160:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H161:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H162:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H163:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H164:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H165:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H166:  dns_types__header_bits div 8 >= system__min_int .
H167:  dns_types__header_bits div 8 <= system__max_int .
H168:  8 <> 0 .
H169:  num_found >= rr_type__numberofrecordstype__first .
H170:  num_found <= rr_type__numberofrecordstype__last .
        ->
C1:    answer_count + num_found >= dns_types__unsigned_short__first .
C2:    answer_count + num_found <= dns_types__unsigned_short__last .
C3:    num_found >= dns_types__unsigned_short__first .
C4:    num_found <= dns_types__unsigned_short__last .
 

For path(s) from start to finish:

procedure_create_response_mx_32.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   num_found__1 >= 1 .
H48:   1 >= natural__first .
H49:   1 <= natural__last .
H50:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H51:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H52:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H53:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H54:   1 >= natural__first .
H55:   1 <= natural__last .
H56:   1 >= rr_type__returnedrecordsindextype__first .
H57:   1 <= rr_type__returnedrecordsindextype__last .
H58:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H59:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H60:   (rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) = rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies__1, [1])), [
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1])))]) = 0) and (for_all(q_: integer, ((q_ >= 1) and (
           q_ <= rr_type__wirenamelength(fld_mailexchanger(element(
           replies__1, [1]))) - 1)) -> (element(fld_mailexchanger(element(
           replies__1, [1])), [q_]) <> 0)))) .
H61:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H62:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H63:   num_found__1 >= rr_type__numberofrecordstype__first .
H64:   num_found__1 <= rr_type__numberofrecordstype__last .
H65:   1 >= natural__first .
H66:   1 <= natural__last .
H67:   start_byte >= dns_types__packet_bytes_range__first .
H68:   start_byte <= dns_types__packet_bytes_range__last .
H69:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           >= rr_type__wirestringtypeindex__first .
H70:   rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [1])))
           <= rr_type__wirestringtypeindex__last .
H71:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))) <= integer__base__last)) .
H72:   (1 <= num_found__1) -> ((dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H73:   (1 <= num_found__1) -> ((14 + dns_types__header_bits div 8 >= system__min_int)
           and (14 + dns_types__header_bits div 8 <= system__max_int)) .
H74:   (1 <= num_found__1) -> ((dns_types__header_bits div 8 >= system__min_int)
           and (dns_types__header_bits div 8 <= system__max_int)) .
H75:   (1 <= num_found__1) -> (8 <> 0) .
H76:   (1 <= num_found__1) -> ((start_byte >= integer__first) and (
           start_byte <= integer__last)) .
H77:   not ((1 <= num_found__1) and (start_byte < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(replies__1, [
           1]))))) .
H78:   start_byte >= dns_types__packet_bytes_range__first .
H79:   start_byte <= dns_types__packet_bytes_range__last .
H80:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H81:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H82:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H83:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H84:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H85:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H86:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H87:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H88:   dns_types__header_bits div 8 >= system__min_int .
H89:   dns_types__header_bits div 8 <= system__max_int .
H90:   8 <> 0 .
H91:   num_found__1 >= rr_type__numberofrecordstype__first .
H92:   num_found__1 <= rr_type__numberofrecordstype__last .
H93:   answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
H94:   answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
H95:   num_found__1 >= dns_types__unsigned_short__first .
H96:   num_found__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found__1 <= answer_count + 
           rr_type__maxnumrecords .
 

procedure_create_response_mx_33.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   0 >= dns_types__qname_ptr_range__first .
H34:   0 <= dns_types__qname_ptr_range__last .
H35:   start_byte >= dns_types__packet_bytes_range__first .
H36:   start_byte <= dns_types__packet_bytes_range__last .
H37:   for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies__1, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies__1, [i___1])), [i___2]) <= character__last))))) .
H38:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies__1, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies__1, [i___1])) <= 
           unsigned_types__unsigned16__last))) .
H39:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies__1, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies__1, [i___1]))) <= rr_type__classtype__last))) .
H40:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H41:   num_found__1 >= rr_type__numberofrecordstype__first .
H42:   num_found__1 <= rr_type__numberofrecordstype__last .
H43:   num_found__1 >= rr_type__numberofrecordstype__first .
H44:   num_found__1 <= rr_type__numberofrecordstype__last .
H45:   num_found__1 >= rr_type__numberofrecordstype__first .
H46:   num_found__1 <= rr_type__numberofrecordstype__last .
H47:   not (num_found__1 >= 1) .
H48:   start_byte >= dns_types__packet_bytes_range__first .
H49:   start_byte <= dns_types__packet_bytes_range__last .
H50:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H51:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H52:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H53:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H54:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H55:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H56:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H57:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H58:   dns_types__header_bits div 8 >= system__min_int .
H59:   dns_types__header_bits div 8 <= system__max_int .
H60:   8 <> 0 .
H61:   num_found__1 >= rr_type__numberofrecordstype__first .
H62:   num_found__1 <= rr_type__numberofrecordstype__last .
H63:   answer_count + num_found__1 >= 
           dns_types__unsigned_short__first .
H64:   answer_count + num_found__1 <= 
           dns_types__unsigned_short__last .
H65:   num_found__1 >= dns_types__unsigned_short__first .
H66:   num_found__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found__1 <= answer_count + 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 508 to finish:

procedure_create_response_mx_34.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  response_counter + 1 <= num_found .
H141:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H142:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H143:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H144:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H145:  response_counter + 1 >= natural__first .
H146:  response_counter + 1 <= natural__last .
H147:  response_counter + 1 >= 
           rr_type__returnedrecordsindextype__first .
H148:  response_counter + 1 <= 
           rr_type__returnedrecordsindextype__last .
H149:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H150:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H151:  (rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) = 
           rr_type__maxdomainnamelength + 1) or ((element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [rr_type__wirenamelength(
           fld_mailexchanger(element(replies, [
           response_counter + 1])))]) = 0) and (for_all(q_: 
           integer, ((q_ >= 1) and (q_ <= 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) - 1)) -> (element(
           fld_mailexchanger(element(replies, [
           response_counter + 1])), [q_]) <> 0)))) .
H152:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H153:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H154:  num_found >= rr_type__numberofrecordstype__first .
H155:  num_found <= rr_type__numberofrecordstype__last .
H156:  response_counter + 1 >= natural__first .
H157:  response_counter + 1 <= natural__last .
H158:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H159:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H160:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= 
           rr_type__wirestringtypeindex__first .
H161:  rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= 
           rr_type__wirestringtypeindex__last .
H162:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))) <= integer__base__last)) .
H163:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H164:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H165:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H166:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H167:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H168:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           rr_type__wirenamelength(fld_mailexchanger(element(
           replies, [response_counter + 1]))))) .
H169:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H170:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H171:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H172:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H173:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H174:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H175:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H176:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H177:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H178:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H179:  dns_types__header_bits div 8 >= system__min_int .
H180:  dns_types__header_bits div 8 <= system__max_int .
H181:  8 <> 0 .
H182:  num_found >= rr_type__numberofrecordstype__first .
H183:  num_found <= rr_type__numberofrecordstype__last .
H184:  answer_count + num_found >= dns_types__unsigned_short__first .
H185:  answer_count + num_found <= dns_types__unsigned_short__last .
H186:  num_found >= dns_types__unsigned_short__first .
H187:  num_found <= dns_types__unsigned_short__last .
        ->
C1:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found <= answer_count~ + 
           rr_type__maxnumrecords .
 

procedure_create_response_mx_35.
H1:    response_counter >= 1 .
H2:    response_counter <= num_found .
H3:    current_name_length >= 1 .
H4:    current_name_length <= rr_type__wirestringtypeindex__last .
H5:    num_found <= rr_type__maxnumrecords .
H6:    start_byte <= dns_types__packet_size .
H7:    answer_count = answer_count~ .
H8:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H9:    current_byte < dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length .
H10:   current_byte >= 0 .
H11:   start_byte >= dns_types__packet_bytes_range__first .
H12:   start_byte <= dns_types__packet_bytes_range__last .
H13:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H14:   qname_location >= dns_types__qname_ptr_range__first .
H15:   qname_location <= dns_types__qname_ptr_range__last .
H16:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H17:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H18:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H19:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H20:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H21:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H22:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H23:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H24:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H25:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H26:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   true .
H32:   true .
H33:   true .
H34:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H35:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H36:   true .
H37:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H38:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H39:   answer_count >= dns_types__unsigned_short__first .
H40:   answer_count <= dns_types__unsigned_short__last .
H41:   start_byte <= dns_types__packet_size .
H42:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H43:   current_byte >= dns_types__packet_bytes_range__first .
H44:   current_byte <= dns_types__packet_bytes_range__last .
H45:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H46:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H47:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H48:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H49:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H50:   qname_location >= unsigned_types__unsigned16__first .
H51:   qname_location <= unsigned_types__unsigned16__last .
H52:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H53:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H54:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H55:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H56:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H57:   0 >= dns_types__byte__first .
H58:   0 <= dns_types__byte__last .
H59:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H60:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H61:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H62:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H63:   15 >= dns_types__byte__first .
H64:   15 <= dns_types__byte__last .
H65:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H66:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H67:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H68:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H69:   0 >= dns_types__byte__first .
H70:   0 <= dns_types__byte__last .
H71:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H72:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H73:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H74:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H75:   1 >= dns_types__byte__first .
H76:   1 <= dns_types__byte__last .
H77:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H78:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H79:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H80:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H81:   current_byte >= dns_types__packet_bytes_range__first .
H82:   current_byte <= dns_types__packet_bytes_range__last .
H83:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H84:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H85:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__qname_ptr_range__first .
H86:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__qname_ptr_range__last .
H87:   current_byte + 14 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H88:   current_byte + 14 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H89:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H90:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H91:   dns_types__header_bits div 8 >= system__min_int .
H92:   dns_types__header_bits div 8 <= system__max_int .
H93:   8 <> 0 .
H94:   current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H96:   response_counter >= rr_type__returnedrecordsindextype__first .
H97:   response_counter <= rr_type__returnedrecordsindextype__last .
H98:   current_byte >= dns_types__packet_bytes_range__first .
H99:   current_byte <= dns_types__packet_bytes_range__last .
H100:  for_all(i___2: integer, ((i___2 >= 
           rr_type__wirestringtypeindex__first) and (i___2 <= 
           rr_type__wirestringtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_mailexchanger(element(replies, [i___1])), [
           i___2]) >= character__first) and (element(fld_mailexchanger(element(
           replies, [i___1])), [i___2]) <= character__last))))) .
H101:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_pref(element(replies, [i___1])) >= 
           unsigned_types__unsigned16__first) and (fld_pref(element(
           replies, [i___1])) <= unsigned_types__unsigned16__last))) .
H102:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(replies, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           replies, [i___1]))) <= rr_type__classtype__last))) .
H103:  for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(replies, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H104:  response_counter >= natural__first .
H105:  response_counter <= natural__last .
H106:  current_name_length >= rr_type__wirestringtypeindex__first .
H107:  current_name_length <= rr_type__wirestringtypeindex__last .
H108:  current_name_length >= rr_type__wirestringtypeindex__first .
H109:  current_name_length <= rr_type__wirestringtypeindex__last .
H110:  current_byte + 7 >= dns_types__packet_bytes_range__first .
H111:  current_byte + 7 <= dns_types__packet_bytes_range__last .
H112:  current_name_length >= 0 .
H113:  current_name_length <= rr_type__wirestringtypeindex__last .
H114:  current_byte + 7 <= dns_types__packet_bytes_range__last - 8 - 
           current_name_length .
H115:  response_counter >= rr_type__returnedrecordsindextype__first .
H116:  response_counter <= rr_type__returnedrecordsindextype__last .
H117:  current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H118:  current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H119:  for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H120:  fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H121:  output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 15))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H122:  response_counter >= natural__first .
H123:  response_counter <= natural__last .
H124:  response_counter + 1 >= natural__first .
H125:  response_counter + 1 <= natural__last .
H126:  current_byte >= dns_types__packet_bytes_range__first .
H127:  current_byte <= dns_types__packet_bytes_range__last .
H128:  current_name_length >= rr_type__wirestringtypeindex__first .
H129:  current_name_length <= rr_type__wirestringtypeindex__last .
H130:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H131:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H132:  current_name_length >= dns_types__packet_bytes_range__first .
H133:  current_name_length <= dns_types__packet_bytes_range__last .
H134:  current_byte + 14 >= dns_types__packet_bytes_range__base__first .
H135:  current_byte + 14 <= dns_types__packet_bytes_range__base__last .
H136:  num_found >= rr_type__numberofrecordstype__first .
H137:  num_found <= rr_type__numberofrecordstype__last .
H138:  response_counter + 1 >= natural__first .
H139:  response_counter + 1 <= natural__last .
H140:  not (response_counter + 1 <= num_found) .
H141:  num_found >= rr_type__numberofrecordstype__first .
H142:  num_found <= rr_type__numberofrecordstype__last .
H143:  response_counter + 1 >= natural__first .
H144:  response_counter + 1 <= natural__last .
H145:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H146:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H147:  current_name_length >= rr_type__wirestringtypeindex__first .
H148:  current_name_length <= rr_type__wirestringtypeindex__last .
H149:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length >= integer__base__first) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length <= integer__base__last)) .
H150:  (response_counter + 1 <= num_found) -> ((
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) >= system__min_int) and (
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) <= system__max_int)) .
H151:  (response_counter + 1 <= num_found) -> ((14 + 
           dns_types__header_bits div 8 >= system__min_int) and (14 + 
           dns_types__header_bits div 8 <= system__max_int)) .
H152:  (response_counter + 1 <= num_found) -> ((
           dns_types__header_bits div 8 >= system__min_int) and (
           dns_types__header_bits div 8 <= system__max_int)) .
H153:  (response_counter + 1 <= num_found) -> (8 <> 0) .
H154:  (response_counter + 1 <= num_found) -> ((
           current_byte + 14 + current_name_length >= 
           integer__first) and (current_byte + 14 + 
           current_name_length <= integer__last)) .
H155:  not ((response_counter + 1 <= num_found) and (
           current_byte + 14 + current_name_length < 
           dns_types__packet_size - (14 + 
           dns_types__header_bits div 8) - 
           current_name_length)) .
H156:  current_byte + 14 + current_name_length >= 
           dns_types__packet_bytes_range__first .
H157:  current_byte + 14 + current_name_length <= 
           dns_types__packet_bytes_range__last .
H158:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H159:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H160:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H161:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H162:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H163:  current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H164:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H165:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H166:  dns_types__header_bits div 8 >= system__min_int .
H167:  dns_types__header_bits div 8 <= system__max_int .
H168:  8 <> 0 .
H169:  num_found >= rr_type__numberofrecordstype__first .
H170:  num_found <= rr_type__numberofrecordstype__last .
H171:  answer_count + num_found >= dns_types__unsigned_short__first .
H172:  answer_count + num_found <= dns_types__unsigned_short__last .
H173:  num_found >= dns_types__unsigned_short__first .
H174:  num_found <= dns_types__unsigned_short__last .
        ->
C1:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 14 + current_name_length + 
           dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + num_found <= answer_count~ + 
           rr_type__maxnumrecords .
 

