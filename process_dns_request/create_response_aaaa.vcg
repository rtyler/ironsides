           *******************************************************
                       Semantic Analysis of SPARK Text
                             Examiner GPL Edition

           *******************************************************


             procedure Process_Dns_Request.Create_Response_AAAA




For path(s) from start to run-time check associated with statement of line 275:

procedure_create_response_aaaa_1.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
        ->
C1:    numfound__1 >= natural__first .
C2:    numfound__1 <= natural__last .
 

For path(s) from start to run-time check associated with statement of line 278:

procedure_create_response_aaaa_2.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
        ->
C1:    start_byte >= dns_types__packet_bytes_range__first .
C2:    start_byte <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 281:

procedure_create_response_aaaa_3.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
        ->
C1:    1 >= natural__first .
C2:    1 <= natural__last .
 

For path(s) from start to run-time check associated with statement of line 282:

procedure_create_response_aaaa_4.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   start_byte >= dns_types__packet_bytes_range__first .
H48:   start_byte <= dns_types__packet_bytes_range__last .
H49:   numfound__1 >= natural__first .
H50:   numfound__1 <= natural__last .
H51:   1 >= natural__first .
H52:   1 <= natural__last .
        ->
C1:    dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
C2:    dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
C3:    28 + dns_types__header_bits div 8 >= system__min_int .
C4:    28 + dns_types__header_bits div 8 <= system__max_int .
C5:    dns_types__header_bits div 8 >= system__min_int .
C6:    dns_types__header_bits div 8 <= system__max_int .
C7:    8 <> 0 .
C8:    start_byte >= integer__first .
C9:    start_byte <= integer__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 282:

procedure_create_response_aaaa_5.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
H105:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H106:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H107:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H108:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H109:  numfound >= natural__first .
H110:  numfound <= natural__last .
H111:  response_counter + 1 >= natural__first .
H112:  response_counter + 1 <= natural__last .
        ->
C1:    dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
C2:    dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
C3:    28 + dns_types__header_bits div 8 >= system__min_int .
C4:    28 + dns_types__header_bits div 8 <= system__max_int .
C5:    dns_types__header_bits div 8 >= system__min_int .
C6:    dns_types__header_bits div 8 <= system__max_int .
C7:    8 <> 0 .
C8:    current_byte + 28 >= integer__first .
C9:    current_byte + 28 <= integer__last .
 

For path(s) from start to assertion of line 283:

procedure_create_response_aaaa_6.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   start_byte >= dns_types__packet_bytes_range__first .
H48:   start_byte <= dns_types__packet_bytes_range__last .
H49:   numfound__1 >= natural__first .
H50:   numfound__1 <= natural__last .
H51:   1 >= natural__first .
H52:   1 <= natural__last .
H53:   dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H54:   dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H55:   28 + dns_types__header_bits div 8 >= system__min_int .
H56:   28 + dns_types__header_bits div 8 <= system__max_int .
H57:   dns_types__header_bits div 8 >= system__min_int .
H58:   dns_types__header_bits div 8 <= system__max_int .
H59:   8 <> 0 .
H60:   start_byte >= integer__first .
H61:   start_byte <= integer__last .
H62:   1 <= numfound__1 .
H63:   start_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
        ->
C1:    1 >= 1 .
C2:    1 <= numfound__1 .
C3:    answer_count = answer_count .
C4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C5:    start_byte = start_byte + 28 * (1 - 1) .
C6:    start_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
C7:    numfound__1 <= rr_type__maxnumrecords .
C8:    start_byte >= dns_types__packet_bytes_range__first .
C9:    start_byte <= dns_types__packet_bytes_range__last .
C10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C11:   qname_location >= dns_types__qname_ptr_range__first .
C12:   qname_location <= dns_types__qname_ptr_range__last .
C13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
C14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
C23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
C24:   true .
C25:   true .
C26:   true .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
C32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
C33:   true .
C34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
C35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
C36:   answer_count >= dns_types__unsigned_short__first .
C37:   answer_count <= dns_types__unsigned_short__last .
C38:   start_byte <= dns_types__packet_size .
C39:   answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 283 to assertion of line 283:

procedure_create_response_aaaa_7.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
H105:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H106:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H107:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H108:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H109:  numfound >= natural__first .
H110:  numfound <= natural__last .
H111:  response_counter + 1 >= natural__first .
H112:  response_counter + 1 <= natural__last .
H113:  dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H114:  dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H115:  28 + dns_types__header_bits div 8 >= system__min_int .
H116:  28 + dns_types__header_bits div 8 <= system__max_int .
H117:  dns_types__header_bits div 8 >= system__min_int .
H118:  dns_types__header_bits div 8 <= system__max_int .
H119:  8 <> 0 .
H120:  current_byte + 28 >= integer__first .
H121:  current_byte + 28 <= integer__last .
H122:  response_counter + 1 <= numfound .
H123:  current_byte + 28 < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
        ->
C1:    response_counter + 1 >= 1 .
C2:    response_counter + 1 <= numfound .
C3:    answer_count = answer_count~ .
C4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
C5:    current_byte + 28 = start_byte + 28 * (
           response_counter + 1 - 1) .
C6:    current_byte + 28 < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
C7:    numfound <= rr_type__maxnumrecords .
C8:    start_byte >= dns_types__packet_bytes_range__first .
C9:    start_byte <= dns_types__packet_bytes_range__last .
C10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
C11:   qname_location >= dns_types__qname_ptr_range__first .
C12:   qname_location <= dns_types__qname_ptr_range__last .
C13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
C14:   fld_arcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C15:   fld_arcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C16:   fld_nscount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C17:   fld_nscount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C18:   fld_ancount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C19:   fld_ancount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C20:   fld_qdcount(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C21:   fld_qdcount(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C22:   fld_rcode(fld_header(output_packet__3)) >= 
           dns_types__response_code__first .
C23:   fld_rcode(fld_header(output_packet__3)) <= 
           dns_types__response_code__last .
C24:   true .
C25:   true .
C26:   true .
C27:   true .
C28:   true .
C29:   true .
C30:   true .
C31:   fld_opcode(fld_header(output_packet__3)) >= 
           dns_types__opcode_type__first .
C32:   fld_opcode(fld_header(output_packet__3)) <= 
           dns_types__opcode_type__last .
C33:   true .
C34:   fld_messageid(fld_header(output_packet__3)) >= 
           dns_types__unsigned_short__first .
C35:   fld_messageid(fld_header(output_packet__3)) <= 
           dns_types__unsigned_short__last .
C36:   answer_count >= dns_types__unsigned_short__first .
C37:   answer_count <= dns_types__unsigned_short__last .
C38:   start_byte <= dns_types__packet_size .
C39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 283 to precondition check associated with statement of line 291:

procedure_create_response_aaaa_8.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
C2:    (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
C3:    current_byte + 1 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 1 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
C6:    qname_location >= unsigned_types__unsigned16__first .
C7:    qname_location <= unsigned_types__unsigned16__last .
C8:    current_byte + 1 >= dns_types__packet_bytes_range__base__first .
C9:    current_byte + 1 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 293:

procedure_create_response_aaaa_9.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 3 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 3 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 3 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 3 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 294:

procedure_create_response_aaaa_10.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    28 >= dns_types__byte__first .
C2:    28 <= dns_types__byte__last .
C3:    current_byte + 4 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 4 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 4 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 4 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 296:

procedure_create_response_aaaa_11.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    0 >= dns_types__byte__first .
C2:    0 <= dns_types__byte__last .
C3:    current_byte + 5 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 5 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 5 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 5 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 297:

procedure_create_response_aaaa_12.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
        ->
C1:    1 >= dns_types__byte__first .
C2:    1 <= dns_types__byte__last .
C3:    current_byte + 6 >= dns_types__packet_bytes_range__first .
C4:    current_byte + 6 <= dns_types__packet_bytes_range__last .
C5:    current_byte + 6 >= dns_types__packet_bytes_range__base__first .
C6:    current_byte + 6 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to precondition check associated with statement of line 298:

procedure_create_response_aaaa_13.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
        ->
C1:    current_byte + 7 >= dns_types__packet_bytes_range__first .
C2:    current_byte + 7 <= dns_types__packet_bytes_range__last .
C3:    current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
C4:    rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
C5:    rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
C6:    rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
C7:    rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
C8:    response_counter - 1 >= integer__base__first .
C9:    response_counter - 1 <= integer__base__last .
C10:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
C11:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 299:

procedure_create_response_aaaa_14.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
        ->
C1:    response_counter + 1 >= natural__first .
C2:    response_counter + 1 <= natural__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 300:

procedure_create_response_aaaa_15.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 28 >= dns_types__packet_bytes_range__first .
C2:    current_byte + 28 <= dns_types__packet_bytes_range__last .
 

For path(s) from start to run-time check associated with statement of line 304:

procedure_create_response_aaaa_16.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   start_byte >= dns_types__packet_bytes_range__first .
H48:   start_byte <= dns_types__packet_bytes_range__last .
H49:   numfound__1 >= natural__first .
H50:   numfound__1 <= natural__last .
H51:   1 >= natural__first .
H52:   1 <= natural__last .
H53:   dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H54:   dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H55:   28 + dns_types__header_bits div 8 >= system__min_int .
H56:   28 + dns_types__header_bits div 8 <= system__max_int .
H57:   dns_types__header_bits div 8 >= system__min_int .
H58:   dns_types__header_bits div 8 <= system__max_int .
H59:   8 <> 0 .
H60:   start_byte >= integer__first .
H61:   start_byte <= integer__last .
H62:   not ((1 <= numfound__1) and (start_byte < 
           dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

procedure_create_response_aaaa_17.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   not (numfound__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 304:

procedure_create_response_aaaa_18.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
H105:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H106:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H107:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H108:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H109:  numfound >= natural__first .
H110:  numfound <= natural__last .
H111:  response_counter + 1 >= natural__first .
H112:  response_counter + 1 <= natural__last .
H113:  dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H114:  dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H115:  28 + dns_types__header_bits div 8 >= system__min_int .
H116:  28 + dns_types__header_bits div 8 <= system__max_int .
H117:  dns_types__header_bits div 8 >= system__min_int .
H118:  dns_types__header_bits div 8 <= system__max_int .
H119:  8 <> 0 .
H120:  current_byte + 28 >= integer__first .
H121:  current_byte + 28 <= integer__last .
H122:  not ((response_counter + 1 <= numfound) and (
           current_byte + 28 < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H123:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H124:  current_byte + 28 <= dns_types__packet_bytes_range__last .
        ->
C1:    current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C2:    current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C3:    current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
C4:    current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
C5:    current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
C6:    current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
C7:    dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
C8:    dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
C9:    dns_types__header_bits div 8 >= system__min_int .
C10:   dns_types__header_bits div 8 <= system__max_int .
C11:   8 <> 0 .
 

For path(s) from start to run-time check associated with statement of line 305:

procedure_create_response_aaaa_19.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   start_byte >= dns_types__packet_bytes_range__first .
H48:   start_byte <= dns_types__packet_bytes_range__last .
H49:   numfound__1 >= natural__first .
H50:   numfound__1 <= natural__last .
H51:   1 >= natural__first .
H52:   1 <= natural__last .
H53:   dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H54:   dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H55:   28 + dns_types__header_bits div 8 >= system__min_int .
H56:   28 + dns_types__header_bits div 8 <= system__max_int .
H57:   dns_types__header_bits div 8 >= system__min_int .
H58:   dns_types__header_bits div 8 <= system__max_int .
H59:   8 <> 0 .
H60:   start_byte >= integer__first .
H61:   start_byte <= integer__last .
H62:   not ((1 <= numfound__1) and (start_byte < 
           dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H66:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H67:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H68:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H69:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H70:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H71:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H72:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H73:   dns_types__header_bits div 8 >= system__min_int .
H74:   dns_types__header_bits div 8 <= system__max_int .
H75:   8 <> 0 .
H76:   numfound__1 >= natural__first .
H77:   numfound__1 <= natural__last .
        ->
C1:    answer_count + numfound__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + numfound__1 <= 
           dns_types__unsigned_short__last .
C3:    numfound__1 >= dns_types__unsigned_short__first .
C4:    numfound__1 <= dns_types__unsigned_short__last .
 

procedure_create_response_aaaa_20.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   not (numfound__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
H47:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H48:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H49:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H50:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H51:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H52:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H53:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H54:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H55:   dns_types__header_bits div 8 >= system__min_int .
H56:   dns_types__header_bits div 8 <= system__max_int .
H57:   8 <> 0 .
H58:   numfound__1 >= natural__first .
H59:   numfound__1 <= natural__last .
        ->
C1:    answer_count + numfound__1 >= 
           dns_types__unsigned_short__first .
C2:    answer_count + numfound__1 <= 
           dns_types__unsigned_short__last .
C3:    numfound__1 >= dns_types__unsigned_short__first .
C4:    numfound__1 <= dns_types__unsigned_short__last .
 

For path(s) from assertion of line 283 to run-time check associated with statement of line 305:

procedure_create_response_aaaa_21.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
H105:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H106:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H107:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H108:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H109:  numfound >= natural__first .
H110:  numfound <= natural__last .
H111:  response_counter + 1 >= natural__first .
H112:  response_counter + 1 <= natural__last .
H113:  dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H114:  dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H115:  28 + dns_types__header_bits div 8 >= system__min_int .
H116:  28 + dns_types__header_bits div 8 <= system__max_int .
H117:  dns_types__header_bits div 8 >= system__min_int .
H118:  dns_types__header_bits div 8 <= system__max_int .
H119:  8 <> 0 .
H120:  current_byte + 28 >= integer__first .
H121:  current_byte + 28 <= integer__last .
H122:  not ((response_counter + 1 <= numfound) and (
           current_byte + 28 < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H123:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H124:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H125:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H126:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H127:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H128:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H129:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H130:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H131:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H132:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H133:  dns_types__header_bits div 8 >= system__min_int .
H134:  dns_types__header_bits div 8 <= system__max_int .
H135:  8 <> 0 .
H136:  numfound >= natural__first .
H137:  numfound <= natural__last .
        ->
C1:    answer_count + numfound >= dns_types__unsigned_short__first .
C2:    answer_count + numfound <= dns_types__unsigned_short__last .
C3:    numfound >= dns_types__unsigned_short__first .
C4:    numfound <= dns_types__unsigned_short__last .
 

For path(s) from start to finish:

procedure_create_response_aaaa_22.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   numfound__1 >= 1 .
H45:   1 >= natural__first .
H46:   1 <= natural__last .
H47:   start_byte >= dns_types__packet_bytes_range__first .
H48:   start_byte <= dns_types__packet_bytes_range__last .
H49:   numfound__1 >= natural__first .
H50:   numfound__1 <= natural__last .
H51:   1 >= natural__first .
H52:   1 <= natural__last .
H53:   dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H54:   dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H55:   28 + dns_types__header_bits div 8 >= system__min_int .
H56:   28 + dns_types__header_bits div 8 <= system__max_int .
H57:   dns_types__header_bits div 8 >= system__min_int .
H58:   dns_types__header_bits div 8 <= system__max_int .
H59:   8 <> 0 .
H60:   start_byte >= integer__first .
H61:   start_byte <= integer__last .
H62:   not ((1 <= numfound__1) and (start_byte < 
           dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H63:   start_byte >= dns_types__packet_bytes_range__first .
H64:   start_byte <= dns_types__packet_bytes_range__last .
H65:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H66:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H67:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H68:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H69:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H70:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H71:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H72:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H73:   dns_types__header_bits div 8 >= system__min_int .
H74:   dns_types__header_bits div 8 <= system__max_int .
H75:   8 <> 0 .
H76:   numfound__1 >= natural__first .
H77:   numfound__1 <= natural__last .
H78:   answer_count + numfound__1 >= 
           dns_types__unsigned_short__first .
H79:   answer_count + numfound__1 <= 
           dns_types__unsigned_short__last .
H80:   numfound__1 >= dns_types__unsigned_short__first .
H81:   numfound__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + numfound__1 <= answer_count + 
           rr_type__maxnumrecords .
 

procedure_create_response_aaaa_23.
H1:    start_byte <= dns_types__packet_size .
H2:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H3:    start_byte >= dns_types__packet_bytes_range__first .
H4:    start_byte <= dns_types__packet_bytes_range__last .
H5:    for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H6:    qname_location >= dns_types__qname_ptr_range__first .
H7:    qname_location <= dns_types__qname_ptr_range__last .
H8:    for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H9:    fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H10:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H11:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H12:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H13:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H14:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H15:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H16:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H17:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H18:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H19:   true .
H20:   true .
H21:   true .
H22:   true .
H23:   true .
H24:   true .
H25:   true .
H26:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H27:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H28:   true .
H29:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H30:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H31:   answer_count >= dns_types__unsigned_short__first .
H32:   answer_count <= dns_types__unsigned_short__last .
H33:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords__1, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H34:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= rr_type__classtype__first) and (fld_class(
           fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= rr_type__classtype__last))) .
H35:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) >= unsigned_types__unsigned32__first) and (
           fld_ttlinseconds(fld_inherit(element(returnedaaaarecords__1, [
           i___1]))) <= unsigned_types__unsigned32__last))) .
H36:   numfound__1 >= rr_type__numberofrecordstype__first .
H37:   numfound__1 <= rr_type__numberofrecordstype__last .
H38:   numfound__1 >= natural__first .
H39:   numfound__1 <= natural__last .
H40:   start_byte >= dns_types__packet_bytes_range__first .
H41:   start_byte <= dns_types__packet_bytes_range__last .
H42:   numfound__1 >= natural__first .
H43:   numfound__1 <= natural__last .
H44:   not (numfound__1 >= 1) .
H45:   start_byte >= dns_types__packet_bytes_range__first .
H46:   start_byte <= dns_types__packet_bytes_range__last .
H47:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H48:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H49:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H50:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H51:   start_byte + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H52:   start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H53:   dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H54:   dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H55:   dns_types__header_bits div 8 >= system__min_int .
H56:   dns_types__header_bits div 8 <= system__max_int .
H57:   8 <> 0 .
H58:   numfound__1 >= natural__first .
H59:   numfound__1 <= natural__last .
H60:   answer_count + numfound__1 >= 
           dns_types__unsigned_short__first .
H61:   answer_count + numfound__1 <= 
           dns_types__unsigned_short__last .
H62:   numfound__1 >= dns_types__unsigned_short__first .
H63:   numfound__1 <= dns_types__unsigned_short__last .
        ->
C1:    start_byte + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    start_byte + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + numfound__1 <= answer_count + 
           rr_type__maxnumrecords .
 

For path(s) from assertion of line 283 to finish:

procedure_create_response_aaaa_24.
H1:    response_counter >= 1 .
H2:    response_counter <= numfound .
H3:    answer_count = answer_count~ .
H4:    answer_count <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H5:    current_byte = start_byte + 28 * (response_counter - 1) .
H6:    current_byte < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8) .
H7:    numfound <= rr_type__maxnumrecords .
H8:    start_byte >= dns_types__packet_bytes_range__first .
H9:    start_byte <= dns_types__packet_bytes_range__last .
H10:   for_all(i___1: integer, ((i___1 >= 
           rr_type__wirestringtypeindex__first) and (i___1 <= 
           rr_type__wirestringtypeindex__last)) -> ((element(
           domainname, [i___1]) >= character__first) and (element(
           domainname, [i___1]) <= character__last))) .
H11:   qname_location >= dns_types__qname_ptr_range__first .
H12:   qname_location <= dns_types__qname_ptr_range__last .
H13:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet), [i___1]) <= dns_types__byte__last))) .
H14:   fld_arcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H15:   fld_arcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H16:   fld_nscount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H17:   fld_nscount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H18:   fld_ancount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H19:   fld_ancount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H20:   fld_qdcount(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H21:   fld_qdcount(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H22:   fld_rcode(fld_header(output_packet)) >= 
           dns_types__response_code__first .
H23:   fld_rcode(fld_header(output_packet)) <= 
           dns_types__response_code__last .
H24:   true .
H25:   true .
H26:   true .
H27:   true .
H28:   true .
H29:   true .
H30:   true .
H31:   fld_opcode(fld_header(output_packet)) >= 
           dns_types__opcode_type__first .
H32:   fld_opcode(fld_header(output_packet)) <= 
           dns_types__opcode_type__last .
H33:   true .
H34:   fld_messageid(fld_header(output_packet)) >= 
           dns_types__unsigned_short__first .
H35:   fld_messageid(fld_header(output_packet)) <= 
           dns_types__unsigned_short__last .
H36:   answer_count >= dns_types__unsigned_short__first .
H37:   answer_count <= dns_types__unsigned_short__last .
H38:   start_byte <= dns_types__packet_size .
H39:   answer_count~ <= dns_types__unsigned_short__last - 
           rr_type__maxnumrecords .
H40:   current_byte >= dns_types__packet_bytes_range__first .
H41:   current_byte <= dns_types__packet_bytes_range__last .
H42:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus >= 
           unsigned_types__unsigned16__first .
H43:   (qname_location + 49152) mod 
           unsigned_types__unsigned16__modulus <= 
           unsigned_types__unsigned16__last .
H44:   current_byte + 1 >= dns_types__packet_bytes_range__first .
H45:   current_byte + 1 <= dns_types__packet_bytes_range__last .
H46:   current_byte + 1 <= dns_types__packet_bytes_range__last - 1 .
H47:   qname_location >= unsigned_types__unsigned16__first .
H48:   qname_location <= unsigned_types__unsigned16__last .
H49:   current_byte + 1 >= dns_types__packet_bytes_range__base__first .
H50:   current_byte + 1 <= dns_types__packet_bytes_range__base__last .
H51:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__2), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__2), [i___1]) <= dns_types__byte__last))) .
H52:   fld_header(output_packet__2) = fld_header(
           output_packet) .
H53:   output_packet__2 = upf_bytes(output_packet, fld_bytes(
           output_packet__2)) .
H54:   0 >= dns_types__byte__first .
H55:   0 <= dns_types__byte__last .
H56:   current_byte + 3 >= dns_types__packet_bytes_range__first .
H57:   current_byte + 3 <= dns_types__packet_bytes_range__last .
H58:   current_byte + 3 >= dns_types__packet_bytes_range__base__first .
H59:   current_byte + 3 <= dns_types__packet_bytes_range__base__last .
H60:   28 >= dns_types__byte__first .
H61:   28 <= dns_types__byte__last .
H62:   current_byte + 4 >= dns_types__packet_bytes_range__first .
H63:   current_byte + 4 <= dns_types__packet_bytes_range__last .
H64:   current_byte + 4 >= dns_types__packet_bytes_range__base__first .
H65:   current_byte + 4 <= dns_types__packet_bytes_range__base__last .
H66:   0 >= dns_types__byte__first .
H67:   0 <= dns_types__byte__last .
H68:   current_byte + 5 >= dns_types__packet_bytes_range__first .
H69:   current_byte + 5 <= dns_types__packet_bytes_range__last .
H70:   current_byte + 5 >= dns_types__packet_bytes_range__base__first .
H71:   current_byte + 5 <= dns_types__packet_bytes_range__base__last .
H72:   1 >= dns_types__byte__first .
H73:   1 <= dns_types__byte__last .
H74:   current_byte + 6 >= dns_types__packet_bytes_range__first .
H75:   current_byte + 6 <= dns_types__packet_bytes_range__last .
H76:   current_byte + 6 >= dns_types__packet_bytes_range__base__first .
H77:   current_byte + 6 <= dns_types__packet_bytes_range__base__last .
H78:   current_byte >= dns_types__packet_bytes_range__first .
H79:   current_byte <= dns_types__packet_bytes_range__last .
H80:   for_all(i___2: integer, ((i___2 >= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__first) and (
           i___2 <= 
           rr_type__aaaa_record_type__ipv6addrtypeindex__last)) -> (for_all(
           i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) >= unsigned_types__unsigned16__first) and (element(
           fld_ipv6(element(returnedaaaarecords, [i___1])), [
           i___2]) <= unsigned_types__unsigned16__last))))) .
H81:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           rr_type__classtype__first) and (fld_class(fld_inherit(element(
           returnedaaaarecords, [i___1]))) <= 
           rr_type__classtype__last))) .
H82:   for_all(i___1: integer, ((i___1 >= 
           rr_type__returnedrecordsindextype__first) and (
           i___1 <= rr_type__returnedrecordsindextype__last)) -> ((
           fld_ttlinseconds(fld_inherit(element(
           returnedaaaarecords, [i___1]))) >= 
           unsigned_types__unsigned32__first) and (fld_ttlinseconds(
           fld_inherit(element(returnedaaaarecords, [i___1]))) <= 
           unsigned_types__unsigned32__last))) .
H83:   response_counter >= natural__first .
H84:   response_counter <= natural__last .
H85:   current_byte + 7 >= dns_types__packet_bytes_range__first .
H86:   current_byte + 7 <= dns_types__packet_bytes_range__last .
H87:   current_byte + 7 <= dns_types__packet_bytes_range__last - 22 .
H88:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= 
           rr_type__returnedrecordsindextype__first .
H89:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= 
           rr_type__returnedrecordsindextype__last .
H90:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) >= integer__base__first .
H91:   rr_type__returnedrecordsindextype__first + (
           response_counter - 1) <= integer__base__last .
H92:   response_counter - 1 >= integer__base__first .
H93:   response_counter - 1 <= integer__base__last .
H94:   current_byte + 7 >= dns_types__packet_bytes_range__base__first .
H95:   current_byte + 7 <= dns_types__packet_bytes_range__base__last .
H96:   for_all(i___1: dns_types__packet_bytes_range, ((
           i___1 >= dns_types__packet_bytes_range__first) and (
           i___1 <= dns_types__packet_bytes_range__last)) -> ((element(
           fld_bytes(output_packet__3), [i___1]) >= 
           dns_types__byte__first) and (element(fld_bytes(
           output_packet__3), [i___1]) <= dns_types__byte__last))) .
H97:   fld_header(output_packet__3) = fld_header(upf_bytes(upf_bytes(
           upf_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1))) .
H98:   output_packet__3 = upf_bytes(upf_bytes(upf_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0)), update(
           fld_bytes(upf_bytes(upf_bytes(upf_bytes(output_packet__2, update(
           fld_bytes(output_packet__2), [current_byte + 3], 0)), update(
           fld_bytes(upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28)), update(fld_bytes(upf_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0)), update(fld_bytes(
           upf_bytes(output_packet__2, update(fld_bytes(
           output_packet__2), [current_byte + 3], 0))), [
           current_byte + 4], 28))), [current_byte + 5], 0))), [
           current_byte + 6], 1)), fld_bytes(output_packet__3)) .
H99:   response_counter >= natural__first .
H100:  response_counter <= natural__last .
H101:  response_counter + 1 >= natural__first .
H102:  response_counter + 1 <= natural__last .
H103:  current_byte >= dns_types__packet_bytes_range__first .
H104:  current_byte <= dns_types__packet_bytes_range__last .
H105:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H106:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H107:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H108:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H109:  numfound >= natural__first .
H110:  numfound <= natural__last .
H111:  response_counter + 1 >= natural__first .
H112:  response_counter + 1 <= natural__last .
H113:  dns_types__packet_size - (28 + dns_types__header_bits div 8) >= system__min_int .
H114:  dns_types__packet_size - (28 + dns_types__header_bits div 8) <= system__max_int .
H115:  28 + dns_types__header_bits div 8 >= system__min_int .
H116:  28 + dns_types__header_bits div 8 <= system__max_int .
H117:  dns_types__header_bits div 8 >= system__min_int .
H118:  dns_types__header_bits div 8 <= system__max_int .
H119:  8 <> 0 .
H120:  current_byte + 28 >= integer__first .
H121:  current_byte + 28 <= integer__last .
H122:  not ((response_counter + 1 <= numfound) and (
           current_byte + 28 < dns_types__packet_size - (28 + 
           dns_types__header_bits div 8))) .
H123:  current_byte + 28 >= dns_types__packet_bytes_range__first .
H124:  current_byte + 28 <= dns_types__packet_bytes_range__last .
H125:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H126:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H127:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_length_range__first .
H128:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_length_range__last .
H129:  current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__base__first .
H130:  current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__base__last .
H131:  dns_types__header_bits div 8 >= 
           dns_types__packet_bytes_range__first .
H132:  dns_types__header_bits div 8 <= 
           dns_types__packet_bytes_range__last .
H133:  dns_types__header_bits div 8 >= system__min_int .
H134:  dns_types__header_bits div 8 <= system__max_int .
H135:  8 <> 0 .
H136:  numfound >= natural__first .
H137:  numfound <= natural__last .
H138:  answer_count + numfound >= dns_types__unsigned_short__first .
H139:  answer_count + numfound <= dns_types__unsigned_short__last .
H140:  numfound >= dns_types__unsigned_short__first .
H141:  numfound <= dns_types__unsigned_short__last .
        ->
C1:    current_byte + 28 + dns_types__header_bits div 8 >= 
           dns_types__header_bits div 8 + 1 .
C2:    current_byte + 28 + dns_types__header_bits div 8 <= 
           dns_types__packet_size .
C3:    answer_count + numfound <= answer_count~ + 
           rr_type__maxnumrecords .
 

