           /*********************************************************/
                           /*Proof Rule Declarations*/
                             /*Examiner GPL Edition*/

           /*********************************************************/


            /*procedure Process_Dns_Request.Process_Response_Cname*/


rule_family process_resp_rules:
     X      requires [X:any] &
     X <= Y requires [X:ire, Y:ire] &
     X >= Y requires [X:ire, Y:ire].

process_resp_rules(1): dns_types__packet_size may_be_replaced_by 8192.
process_resp_rules(2): dns_types__header_bits may_be_replaced_by 96.
process_resp_rules(3): rr_type__maxdomainnamelength may_be_replaced_by 128.
process_resp_rules(4): system__min_int may_be_replaced_by -9223372036854775808.
process_resp_rules(5): system__max_int may_be_replaced_by 9223372036854775807.
process_resp_rules(6): integer__size >= 0 may_be_deduced.
process_resp_rules(7): integer__first may_be_replaced_by -2147483648.
process_resp_rules(8): integer__last may_be_replaced_by 2147483647.
process_resp_rules(9): integer__base__first may_be_replaced_by -2147483648.
process_resp_rules(10): integer__base__last may_be_replaced_by 2147483647.
process_resp_rules(11): character__size >= 0 may_be_deduced.
process_resp_rules(12): character__first may_be_replaced_by 0.
process_resp_rules(13): character__last may_be_replaced_by 255.
process_resp_rules(14): character__base__first may_be_replaced_by 0.
process_resp_rules(15): character__base__last may_be_replaced_by 255.
process_resp_rules(16): positive__size >= 0 may_be_deduced.
process_resp_rules(17): positive__first may_be_replaced_by 1.
process_resp_rules(18): positive__last may_be_replaced_by 2147483647.
process_resp_rules(19): positive__base__first may_be_replaced_by -2147483648.
process_resp_rules(20): positive__base__last may_be_replaced_by 2147483647.
process_resp_rules(21): dns_types__qname_ptr_range__size >= 0 may_be_deduced.
process_resp_rules(22): dns_types__qname_ptr_range__first may_be_replaced_by 0.
process_resp_rules(23): dns_types__qname_ptr_range__last may_be_replaced_by 16383.
process_resp_rules(24): dns_types__qname_ptr_range__base__first <= 
     dns_types__qname_ptr_range__base__last may_be_deduced.
process_resp_rules(25): dns_types__qname_ptr_range__base__first <= 
     dns_types__qname_ptr_range__first may_be_deduced.
process_resp_rules(26): dns_types__qname_ptr_range__base__last >= 
     dns_types__qname_ptr_range__last may_be_deduced.
process_resp_rules(27): dns_types__packet_length_range__size >= 0 may_be_deduced.
process_resp_rules(28): dns_types__packet_length_range__first may_be_replaced_by 0.
process_resp_rules(29): dns_types__packet_length_range__last may_be_replaced_by 8192.
process_resp_rules(30): dns_types__packet_length_range__base__first may_be_replaced_by -2147483648.
process_resp_rules(31): dns_types__packet_length_range__base__last may_be_replaced_by 2147483647.
process_resp_rules(32): dns_types__packet_bytes_range__size >= 0 may_be_deduced.
process_resp_rules(33): dns_types__packet_bytes_range__first may_be_replaced_by 1.
process_resp_rules(34): dns_types__packet_bytes_range__last may_be_replaced_by 8180.
process_resp_rules(35): dns_types__packet_bytes_range__base__first may_be_replaced_by -2147483648.
process_resp_rules(36): dns_types__packet_bytes_range__base__last may_be_replaced_by 2147483647.
process_resp_rules(37): dns_types__byte__size >= 0 may_be_deduced.
process_resp_rules(38): dns_types__byte__size may_be_replaced_by 8.
process_resp_rules(39): dns_types__byte__first may_be_replaced_by 0.
process_resp_rules(40): dns_types__byte__last may_be_replaced_by 255.
process_resp_rules(41): dns_types__byte__base__first may_be_replaced_by 0.
process_resp_rules(42): dns_types__byte__base__last may_be_replaced_by 255.
process_resp_rules(43): dns_types__byte__modulus may_be_replaced_by 256.
process_resp_rules(44): dns_types__unsigned_short__size >= 0 may_be_deduced.
process_resp_rules(45): dns_types__unsigned_short__size may_be_replaced_by 16.
process_resp_rules(46): dns_types__unsigned_short__first may_be_replaced_by 0.
process_resp_rules(47): dns_types__unsigned_short__last may_be_replaced_by 65535.
process_resp_rules(48): dns_types__unsigned_short__base__first may_be_replaced_by -2147483648.
process_resp_rules(49): dns_types__unsigned_short__base__last may_be_replaced_by 2147483647.
process_resp_rules(50): dns_types__opcode_type__size >= 0 may_be_deduced.
process_resp_rules(51): dns_types__opcode_type__size may_be_replaced_by 4.
process_resp_rules(52): dns_types__opcode_type__first may_be_replaced_by dns_types__query.
process_resp_rules(53): dns_types__opcode_type__last may_be_replaced_by dns_types__status.
process_resp_rules(54): dns_types__opcode_type__base__first may_be_replaced_by dns_types__query.
process_resp_rules(55): dns_types__opcode_type__base__last may_be_replaced_by dns_types__status.
process_resp_rules(56): dns_types__opcode_type__pos(
     dns_types__opcode_type__first) may_be_replaced_by 0.
process_resp_rules(57): dns_types__opcode_type__pos(
     dns_types__query) may_be_replaced_by 0.
process_resp_rules(58): dns_types__opcode_type__val(0) may_be_replaced_by 
     dns_types__query.
process_resp_rules(59): dns_types__opcode_type__pos(
     dns_types__iquery) may_be_replaced_by 1.
process_resp_rules(60): dns_types__opcode_type__val(1) may_be_replaced_by 
     dns_types__iquery.
process_resp_rules(61): dns_types__opcode_type__pos(
     dns_types__status) may_be_replaced_by 2.
process_resp_rules(62): dns_types__opcode_type__val(2) may_be_replaced_by 
     dns_types__status.
process_resp_rules(63): dns_types__opcode_type__pos(
     dns_types__opcode_type__last) may_be_replaced_by 2.
process_resp_rules(64): dns_types__opcode_type__pos(succ(X)) may_be_replaced_by 
     dns_types__opcode_type__pos(X) + 1
     if [X <=dns_types__status, X <> dns_types__status].
process_resp_rules(65): dns_types__opcode_type__pos(pred(X)) may_be_replaced_by 
     dns_types__opcode_type__pos(X) - 1
     if [X >=dns_types__query, X <> dns_types__query].
process_resp_rules(66): dns_types__opcode_type__pos(X) >= 0 may_be_deduced_from
     [dns_types__query <= X, X <= dns_types__status].
process_resp_rules(67): dns_types__opcode_type__pos(X) <= 2 may_be_deduced_from
     [dns_types__query <= X, X <= dns_types__status].
process_resp_rules(68): dns_types__opcode_type__val(X) >= 
     dns_types__query may_be_deduced_from
     [0 <= X, X <= 2].
process_resp_rules(69): dns_types__opcode_type__val(X) <= 
     dns_types__status may_be_deduced_from
     [0 <= X, X <= 2].
process_resp_rules(70): succ(dns_types__opcode_type__val(X)) may_be_replaced_by 
     dns_types__opcode_type__val(X+1)
     if [0 <= X, X < 2].
process_resp_rules(71): pred(dns_types__opcode_type__val(X)) may_be_replaced_by 
     dns_types__opcode_type__val(X-1)
     if [0 < X, X <= 2].
process_resp_rules(72): dns_types__opcode_type__pos(
     dns_types__opcode_type__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 2].
process_resp_rules(73): dns_types__opcode_type__val(
     dns_types__opcode_type__pos(X)) may_be_replaced_by X
     if [dns_types__query <= X, X <= dns_types__status].
process_resp_rules(74): dns_types__opcode_type__pos(X) <= 
     dns_types__opcode_type__pos(Y) & X <= Y are_interchangeable 
     if [dns_types__query <= X, X <= dns_types__status, 
     dns_types__query <= Y, Y <= dns_types__status].
process_resp_rules(75): dns_types__opcode_type__val(X) <= 
     dns_types__opcode_type__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 2, 0 <= Y, Y <= 2].
process_resp_rules(76): dns_types__response_code__size >= 0 may_be_deduced.
process_resp_rules(77): dns_types__response_code__size may_be_replaced_by 4.
process_resp_rules(78): dns_types__response_code__first may_be_replaced_by dns_types__no_error.
process_resp_rules(79): dns_types__response_code__last may_be_replaced_by dns_types__refused.
process_resp_rules(80): dns_types__response_code__base__first may_be_replaced_by dns_types__no_error.
process_resp_rules(81): dns_types__response_code__base__last may_be_replaced_by dns_types__refused.
process_resp_rules(82): dns_types__response_code__pos(
     dns_types__response_code__first) may_be_replaced_by 0.
process_resp_rules(83): dns_types__response_code__pos(
     dns_types__no_error) may_be_replaced_by 0.
process_resp_rules(84): dns_types__response_code__val(0) may_be_replaced_by 
     dns_types__no_error.
process_resp_rules(85): dns_types__response_code__pos(
     dns_types__format_error) may_be_replaced_by 1.
process_resp_rules(86): dns_types__response_code__val(1) may_be_replaced_by 
     dns_types__format_error.
process_resp_rules(87): dns_types__response_code__pos(
     dns_types__server_failure) may_be_replaced_by 2.
process_resp_rules(88): dns_types__response_code__val(2) may_be_replaced_by 
     dns_types__server_failure.
process_resp_rules(89): dns_types__response_code__pos(
     dns_types__name_error) may_be_replaced_by 3.
process_resp_rules(90): dns_types__response_code__val(3) may_be_replaced_by 
     dns_types__name_error.
process_resp_rules(91): dns_types__response_code__pos(
     dns_types__not_implemented) may_be_replaced_by 4.
process_resp_rules(92): dns_types__response_code__val(4) may_be_replaced_by 
     dns_types__not_implemented.
process_resp_rules(93): dns_types__response_code__pos(
     dns_types__refused) may_be_replaced_by 5.
process_resp_rules(94): dns_types__response_code__val(5) may_be_replaced_by 
     dns_types__refused.
process_resp_rules(95): dns_types__response_code__pos(
     dns_types__response_code__last) may_be_replaced_by 5.
process_resp_rules(96): dns_types__response_code__pos(succ(X)) may_be_replaced_by 
     dns_types__response_code__pos(X) + 1
     if [X <=dns_types__refused, X <> dns_types__refused].
process_resp_rules(97): dns_types__response_code__pos(pred(X)) may_be_replaced_by 
     dns_types__response_code__pos(X) - 1
     if [X >=dns_types__no_error, X <> dns_types__no_error].
process_resp_rules(98): dns_types__response_code__pos(X) >= 0 may_be_deduced_from
     [dns_types__no_error <= X, X <= dns_types__refused].
process_resp_rules(99): dns_types__response_code__pos(X) <= 5 may_be_deduced_from
     [dns_types__no_error <= X, X <= dns_types__refused].
process_resp_rules(100): dns_types__response_code__val(X) >= 
     dns_types__no_error may_be_deduced_from
     [0 <= X, X <= 5].
process_resp_rules(101): dns_types__response_code__val(X) <= 
     dns_types__refused may_be_deduced_from
     [0 <= X, X <= 5].
process_resp_rules(102): succ(dns_types__response_code__val(X)) may_be_replaced_by 
     dns_types__response_code__val(X+1)
     if [0 <= X, X < 5].
process_resp_rules(103): pred(dns_types__response_code__val(X)) may_be_replaced_by 
     dns_types__response_code__val(X-1)
     if [0 < X, X <= 5].
process_resp_rules(104): dns_types__response_code__pos(
     dns_types__response_code__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 5].
process_resp_rules(105): dns_types__response_code__val(
     dns_types__response_code__pos(X)) may_be_replaced_by X
     if [dns_types__no_error <= X, X <= dns_types__refused].
process_resp_rules(106): dns_types__response_code__pos(X) <= 
     dns_types__response_code__pos(Y) & X <= Y are_interchangeable 
     if [dns_types__no_error <= X, X <= dns_types__refused, 
     dns_types__no_error <= Y, Y <= dns_types__refused].
process_resp_rules(107): dns_types__response_code__val(X) <= 
     dns_types__response_code__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 5, 0 <= Y, Y <= 5].
process_resp_rules(108): dns_types__header_type__size >= 0 may_be_deduced.
process_resp_rules(109): dns_types__header_type__size may_be_replaced_by 96.
process_resp_rules(110): A = B may_be_deduced_from
     [goal(checktype(A,dns_types__header_type)),
      goal(checktype(B,dns_types__header_type)),
      fld_messageid(A) = fld_messageid(B),
      fld_qr(A) = fld_qr(B),
      fld_opcode(A) = fld_opcode(B),
      fld_aa(A) = fld_aa(B),
      fld_tc(A) = fld_tc(B),
      fld_rd(A) = fld_rd(B),
      fld_ra(A) = fld_ra(B),
      fld_res1(A) = fld_res1(B),
      fld_res2(A) = fld_res2(B),
      fld_res3(A) = fld_res3(B),
      fld_rcode(A) = fld_rcode(B),
      fld_qdcount(A) = fld_qdcount(B),
      fld_ancount(A) = fld_ancount(B),
      fld_nscount(A) = fld_nscount(B),
      fld_arcount(A) = fld_arcount(B)].
process_resp_rules(111): dns_types__dns_packet__size >= 0 may_be_deduced.
process_resp_rules(112): A = B may_be_deduced_from
     [goal(checktype(A,dns_types__dns_packet)),
      goal(checktype(B,dns_types__dns_packet)),
      fld_header(A) = fld_header(B),
      fld_bytes(A) = fld_bytes(B)].
process_resp_rules(113): unsigned_types__unsigned16__size >= 0 may_be_deduced.
process_resp_rules(114): unsigned_types__unsigned16__first may_be_replaced_by 0.
process_resp_rules(115): unsigned_types__unsigned16__last may_be_replaced_by 65535.
process_resp_rules(116): unsigned_types__unsigned16__base__first may_be_replaced_by 0.
process_resp_rules(117): unsigned_types__unsigned16__base__last may_be_replaced_by 65535.
process_resp_rules(118): unsigned_types__unsigned16__modulus may_be_replaced_by 65536.
process_resp_rules(119): unsigned_types__unsigned32__size >= 0 may_be_deduced.
process_resp_rules(120): unsigned_types__unsigned32__first may_be_replaced_by 0.
process_resp_rules(121): unsigned_types__unsigned32__last may_be_replaced_by 4294967295.
process_resp_rules(122): unsigned_types__unsigned32__base__first may_be_replaced_by 0.
process_resp_rules(123): unsigned_types__unsigned32__base__last may_be_replaced_by 4294967295.
process_resp_rules(124): unsigned_types__unsigned32__modulus may_be_replaced_by 4294967296.
process_resp_rules(125): rr_type__classtype__size >= 0 may_be_deduced.
process_resp_rules(126): rr_type__classtype__first may_be_replaced_by rr_type__internet.
process_resp_rules(127): rr_type__classtype__last may_be_replaced_by rr_type__hs.
process_resp_rules(128): rr_type__classtype__base__first may_be_replaced_by rr_type__internet.
process_resp_rules(129): rr_type__classtype__base__last may_be_replaced_by rr_type__hs.
process_resp_rules(130): rr_type__classtype__pos(
     rr_type__classtype__first) may_be_replaced_by 0.
process_resp_rules(131): rr_type__classtype__pos(
     rr_type__internet) may_be_replaced_by 0.
process_resp_rules(132): rr_type__classtype__val(0) may_be_replaced_by 
     rr_type__internet.
process_resp_rules(133): rr_type__classtype__pos(rr_type__cs) may_be_replaced_by 1.
process_resp_rules(134): rr_type__classtype__val(1) may_be_replaced_by 
     rr_type__cs.
process_resp_rules(135): rr_type__classtype__pos(rr_type__ch) may_be_replaced_by 2.
process_resp_rules(136): rr_type__classtype__val(2) may_be_replaced_by 
     rr_type__ch.
process_resp_rules(137): rr_type__classtype__pos(rr_type__hs) may_be_replaced_by 3.
process_resp_rules(138): rr_type__classtype__val(3) may_be_replaced_by 
     rr_type__hs.
process_resp_rules(139): rr_type__classtype__pos(
     rr_type__classtype__last) may_be_replaced_by 3.
process_resp_rules(140): rr_type__classtype__pos(succ(X)) may_be_replaced_by 
     rr_type__classtype__pos(X) + 1
     if [X <=rr_type__hs, X <> rr_type__hs].
process_resp_rules(141): rr_type__classtype__pos(pred(X)) may_be_replaced_by 
     rr_type__classtype__pos(X) - 1
     if [X >=rr_type__internet, X <> rr_type__internet].
process_resp_rules(142): rr_type__classtype__pos(X) >= 0 may_be_deduced_from
     [rr_type__internet <= X, X <= rr_type__hs].
process_resp_rules(143): rr_type__classtype__pos(X) <= 3 may_be_deduced_from
     [rr_type__internet <= X, X <= rr_type__hs].
process_resp_rules(144): rr_type__classtype__val(X) >= 
     rr_type__internet may_be_deduced_from
     [0 <= X, X <= 3].
process_resp_rules(145): rr_type__classtype__val(X) <= 
     rr_type__hs may_be_deduced_from
     [0 <= X, X <= 3].
process_resp_rules(146): succ(rr_type__classtype__val(X)) may_be_replaced_by 
     rr_type__classtype__val(X+1)
     if [0 <= X, X < 3].
process_resp_rules(147): pred(rr_type__classtype__val(X)) may_be_replaced_by 
     rr_type__classtype__val(X-1)
     if [0 < X, X <= 3].
process_resp_rules(148): rr_type__classtype__pos(
     rr_type__classtype__val(X)) may_be_replaced_by X
     if [0 <= X, X <= 3].
process_resp_rules(149): rr_type__classtype__val(
     rr_type__classtype__pos(X)) may_be_replaced_by X
     if [rr_type__internet <= X, X <= rr_type__hs].
process_resp_rules(150): rr_type__classtype__pos(X) <= 
     rr_type__classtype__pos(Y) & X <= Y are_interchangeable 
     if [rr_type__internet <= X, X <= rr_type__hs, 
     rr_type__internet <= Y, Y <= rr_type__hs].
process_resp_rules(151): rr_type__classtype__val(X) <= 
     rr_type__classtype__val(Y) & X <= Y are_interchangeable 
     if [0 <= X, X <= 3, 0 <= Y, Y <= 3].
process_resp_rules(152): rr_type__wirestringtypeindex__size >= 0 may_be_deduced.
process_resp_rules(153): rr_type__wirestringtypeindex__first may_be_replaced_by 1.
process_resp_rules(154): rr_type__wirestringtypeindex__last may_be_replaced_by 129.
process_resp_rules(155): rr_type__wirestringtypeindex__base__first may_be_replaced_by -2147483648.
process_resp_rules(156): rr_type__wirestringtypeindex__base__last may_be_replaced_by 2147483647.
process_resp_rules(157): rr_type__resourcerecordtype__size >= 0 may_be_deduced.
process_resp_rules(158): A = B may_be_deduced_from
     [goal(checktype(A,rr_type__resourcerecordtype)),
      goal(checktype(B,rr_type__resourcerecordtype)),
      fld_ttlinseconds(A) = fld_ttlinseconds(B),
      fld_class(A) = fld_class(B)].
process_resp_rules(159): rr_type__returnedrecordsindextype__size >= 0 may_be_deduced.
process_resp_rules(160): rr_type__returnedrecordsindextype__first may_be_replaced_by 1.
process_resp_rules(161): rr_type__returnedrecordsindextype__last may_be_replaced_by 64.
process_resp_rules(162): rr_type__returnedrecordsindextype__base__first may_be_replaced_by -2147483648.
process_resp_rules(163): rr_type__returnedrecordsindextype__base__last may_be_replaced_by 2147483647.
process_resp_rules(164): 
     rr_type__cname_record_type__cnamerecordtype__size >= 0 may_be_deduced.
process_resp_rules(165): A = B may_be_deduced_from
     [goal(checktype(A,rr_type__cname_record_type__cnamerecordtype)),
      goal(checktype(B,rr_type__cname_record_type__cnamerecordtype)),
      fld_inherit(A) = fld_inherit(B),
      fld_canonicaldomainname(A) = fld_canonicaldomainname(B)].
